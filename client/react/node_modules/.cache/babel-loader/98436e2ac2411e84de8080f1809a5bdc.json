{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\calendar\\\\EgretCalendar.jsx\";\nimport React, { Component } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport * as ReactDOM from \"react-dom\";\nimport { Breadcrumb } from \"egret\";\nimport { getAllEvents, updateEvent } from \"./CalendarService\";\nimport EventEditorDialog from \"./EventEditorDialog\";\nconst localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nlet viewList = Object.keys(Views).map(key => Views[key]);\n\nclass EgretCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      shouldShowEventDialog: false,\n      newEvent: null\n    };\n\n    this.updateCalendar = () => {\n      getAllEvents().then(res => res.data).then(events => {\n        this.setState({\n          events\n        });\n      });\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        shouldShowEventDialog: false\n      });\n      this.updateCalendar();\n    };\n\n    this.handleEventMove = event => {\n      this.handleEventResize(event);\n    };\n\n    this.handleEventResize = event => {\n      updateEvent(event).then(() => {\n        this.updateCalendar();\n      });\n    };\n\n    this.openNewEventDialog = (_ref) => {\n      let action = _ref.action,\n          event = _objectWithoutProperties(_ref, [\"action\"]);\n\n      if (action === \"doubleClick\") {\n        this.setState({\n          newEvent: event,\n          shouldShowEventDialog: true\n        });\n      }\n    };\n\n    this.openExistingEventDialog = event => {\n      this.setState({\n        newEvent: event,\n        shouldShowEventDialog: true\n      });\n    };\n\n    this.headerComponentRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateCalendar();\n  }\n\n  render() {\n    let _this$state = this.state,\n        events = _this$state.events,\n        newEvent = _this$state.newEvent,\n        shouldShowEventDialog = _this$state.shouldShowEventDialog;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      routeSegments: [{\n        name: \"Calendar\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-16\",\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: () => this.openNewEventDialog({\n        action: \"doubleClick\",\n        start: new Date(),\n        end: new Date()\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"Add Event\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"h-700 flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.headerComponentRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(DragAndDropCalendar, {\n      selectable: true,\n      localizer: localizer,\n      events: events,\n      onEventDrop: this.handleEventMove,\n      resizable: true,\n      onEventResize: this.handleEventResize,\n      defaultView: Views.MONTH,\n      defaultDate: new Date(),\n      startAccessor: \"start\",\n      endAccessor: \"end\",\n      views: viewList,\n      step: 60,\n      showMultiDayTimes: true,\n      components: {\n        toolbar: props => {\n          return this.headerComponentRef.current ? ReactDOM.createPortal( /*#__PURE__*/React.createElement(CalendarHeader, Object.assign({}, props, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }\n          })), this.headerComponentRef.current) : /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }\n          }, \"Header component not found\");\n        }\n      } // onNavigate={this.handleNavigate}\n      ,\n      onSelectEvent: event => {\n        this.openExistingEventDialog(event);\n      },\n      onSelectSlot: slotDetails => this.openNewEventDialog(slotDetails),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    })), shouldShowEventDialog && /*#__PURE__*/React.createElement(EventEditorDialog, {\n      handleClose: this.handleDialogClose,\n      open: shouldShowEventDialog,\n      event: newEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default EgretCalendar;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/calendar/EgretCalendar.jsx"],"names":["React","Component","Button","Calendar","Views","momentLocalizer","withDragAndDrop","moment","CalendarHeader","ReactDOM","Breadcrumb","getAllEvents","updateEvent","EventEditorDialog","localizer","DragAndDropCalendar","viewList","Object","keys","map","key","EgretCalendar","constructor","props","state","events","shouldShowEventDialog","newEvent","updateCalendar","then","res","data","setState","handleDialogClose","handleEventMove","event","handleEventResize","openNewEventDialog","action","openExistingEventDialog","headerComponentRef","createRef","componentDidMount","render","name","start","Date","end","MONTH","toolbar","current","createPortal","slotDetails"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport moment from \"moment\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport * as ReactDOM from \"react-dom\";\nimport { Breadcrumb } from \"egret\";\nimport { getAllEvents, updateEvent } from \"./CalendarService\";\nimport EventEditorDialog from \"./EventEditorDialog\";\n\nconst localizer = momentLocalizer(moment);\n\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\n\nlet viewList = Object.keys(Views).map(key => Views[key]);\n\nclass EgretCalendar extends Component {\n  state = {\n    events: [],\n    shouldShowEventDialog: false,\n    newEvent: null\n  };\n\n  constructor(props) {\n    super(props);\n    this.headerComponentRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateCalendar();\n  }\n\n  updateCalendar = () => {\n    getAllEvents()\n      .then(res => res.data)\n      .then(events => {\n        this.setState({ events });\n      });\n  };\n\n  handleDialogClose = () => {\n    this.setState({ shouldShowEventDialog: false });\n    this.updateCalendar();\n  };\n\n  handleEventMove = event => {\n    this.handleEventResize(event);\n  };\n\n  handleEventResize = event => {\n    updateEvent(event).then(() => {\n      this.updateCalendar();\n    });\n  };\n\n  openNewEventDialog = ({ action, ...event }) => {\n    if (action === \"doubleClick\") {\n      this.setState({\n        newEvent: event,\n        shouldShowEventDialog: true\n      });\n    }\n  };\n\n  openExistingEventDialog = event => {\n    this.setState({\n      newEvent: event,\n      shouldShowEventDialog: true\n    });\n  };\n\n  render() {\n    let { events, newEvent, shouldShowEventDialog } = this.state;\n    return (\n      <div className=\"m-sm-30\">\n        <div  className=\"mb-sm-30\">\n          <Breadcrumb routeSegments={[{ name: \"Calendar\" }]} />\n        </div>\n\n        <Button\n          className=\"mb-16\"\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            this.openNewEventDialog({\n              action: \"doubleClick\",\n              start: new Date(),\n              end: new Date()\n            })\n          }\n        >\n          Add Event\n        </Button>\n        <div className=\"h-700 flex-column\">\n          <div ref={this.headerComponentRef} />\n          <DragAndDropCalendar\n            selectable\n            localizer={localizer}\n            events={events}\n            onEventDrop={this.handleEventMove}\n            resizable\n            onEventResize={this.handleEventResize}\n            defaultView={Views.MONTH}\n            defaultDate={new Date()}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            views={viewList}\n            step={60}\n            showMultiDayTimes\n            components={{\n              toolbar: props => {\n                return this.headerComponentRef.current ? (\n                  ReactDOM.createPortal(\n                    <CalendarHeader {...props} />,\n                    this.headerComponentRef.current\n                  )\n                ) : (\n                  <div>Header component not found</div>\n                );\n              }\n            }}\n            // onNavigate={this.handleNavigate}\n            onSelectEvent={event => {\n              this.openExistingEventDialog(event);\n            }}\n            onSelectSlot={slotDetails => this.openNewEventDialog(slotDetails)}\n          />\n        </div>\n        {shouldShowEventDialog && (\n          <EventEditorDialog\n            handleClose={this.handleDialogClose}\n            open={shouldShowEventDialog}\n            event={newEvent}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EgretCalendar;\n"]},"metadata":{},"sourceType":"module"}
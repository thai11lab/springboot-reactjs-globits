{"ast":null,"code":"var _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\MDBDataTable\\\\DatatablePage.jsx\";\nimport React, { Component } from \"react\";\nimport { MDBDataTableFooter } from '../GlobitsDatatableMDB/DataTableFooter';\nimport { MDBDataTable } from '../GlobitsDatatableMDB/DataTable';\nimport { MDBContainer } from 'mdbreact';\nimport { saveAs } from 'file-saver';\nimport { getAllItems, deleteItem, addNewItem, updateItem } from \"./MDBDataTableService\";\nimport DatatableEditorDialog from \"./DatatableEditorDialog\";\nimport shortid from \"shortid\";\nimport { Table, TableHead, TableBody, TableRow, TableCell, Icon, TablePagination, TableContainer } from \"@material-ui/core\";\n\nclass DatatablePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rowsPerPage: 10,\n      page: 0,\n      itemList: [],\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false\n    };\n\n    this.setPage = page => {\n      this.setState({\n        page\n      });\n    };\n\n    this.setRowsPerPage = event => {\n      this.setState({\n        rowsPerPage: event.target.value\n      });\n    };\n\n    this.handleChangePage = (event, newPage) => {\n      this.setPage(newPage);\n    };\n\n    this.handleDownload = () => {\n      var blob = new Blob([\"Hello, world!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"hello world.txt\");\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n      this.updatePageData();\n    };\n\n    this.handleEdit = item => {\n      this.setState({\n        id: item.id,\n        item: item,\n        shouldOpenEditorDialog: true\n      });\n    };\n\n    this.handleDeleteItem = id => {\n      alert(id);\n      this.setState({\n        id,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    this.handleConfirmationResponse = () => {\n      deleteItem(this.state.id).then(() => {\n        this.handleDialogClose();\n      });\n    };\n\n    this.updatePageData = () => {\n      getAllItems().then(({\n        data\n      }) => this.setState({\n        itemList: [...data.content],\n        page: data.pageable.pageNumber + 1\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageData();\n  }\n\n  render() {\n    const divStyle = {\n      overflowX: 'scroll',\n      //border:'1px solid red',\n      position: 'relative'\n    };\n    let _this$state = this.state,\n        rowsPerPage = _this$state.rowsPerPage,\n        page = _this$state.page,\n        itemList = _this$state.itemList,\n        shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n        shouldOpenEditorDialog = _this$state.shouldOpenEditorDialog;\n    let rows = [];\n\n    for (var j = 0; j < itemList.length; j++) {\n      var item = itemList[j];\n      let action = /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.handleEdit(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }, \"Edit \", item.name), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.handleDeleteItem(item.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, \"Delete \", item.id));\n      item.action = action;\n      rows.push(item);\n    }\n\n    let data = {\n      columns: [{\n        label: 'Name',\n        field: 'name',\n        sort: 'asc',\n        width: 150\n      }, {\n        label: 'Code',\n        field: 'code',\n        sort: 'asc',\n        width: 270\n      }, {\n        label: 'Level',\n        field: 'level',\n        sort: 'asc',\n        width: 270\n      }, {\n        label: 'Action',\n        field: 'action',\n        sort: 'asc',\n        width: 270\n      }],\n      rows: rows\n    };\n    console.log(rows);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MDBContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, shouldOpenEditorDialog && /*#__PURE__*/React.createElement(DatatableEditorDialog, {\n      handleClose: this.handleDialogClose,\n      open: shouldOpenEditorDialog,\n      item: this.state.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(MDBDataTableFooter, {\n      scrollY: true,\n      scrollX: true,\n      maxHeight: \"300px\",\n      striped: true,\n      bordered: true,\n      small: true,\n      data: data,\n      exportToCSV: true,\n      info: false,\n      visibleLabel: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default DatatablePage;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/MDBDataTable/DatatablePage.jsx"],"names":["React","Component","MDBDataTableFooter","MDBDataTable","MDBContainer","saveAs","getAllItems","deleteItem","addNewItem","updateItem","DatatableEditorDialog","shortid","Table","TableHead","TableBody","TableRow","TableCell","Icon","TablePagination","TableContainer","DatatablePage","state","rowsPerPage","page","itemList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","setPage","setState","setRowsPerPage","event","target","value","handleChangePage","newPage","handleDownload","blob","Blob","type","handleDialogClose","updatePageData","handleEdit","item","id","handleDeleteItem","alert","handleConfirmationResponse","then","data","content","pageable","pageNumber","componentDidMount","render","divStyle","overflowX","position","rows","j","length","action","name","push","columns","label","field","sort","width","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { MDBDataTableFooter} from '../GlobitsDatatableMDB/DataTableFooter';\r\nimport { MDBDataTable} from '../GlobitsDatatableMDB/DataTable';\r\nimport { MDBContainer } from 'mdbreact';\r\nimport { saveAs } from 'file-saver';\r\nimport { getAllItems, deleteItem,addNewItem, updateItem } from \"./MDBDataTableService\";\r\nimport DatatableEditorDialog from \"./DatatableEditorDialog\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer\r\n} from \"@material-ui/core\";\r\nclass DatatablePage extends Component {\r\n  state = {\r\n    rowsPerPage: 10,\r\n    page: 0,\r\n    itemList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  setPage = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  setRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value });\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setPage(newPage);\r\n  };\r\n  handleDownload = () => {\r\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, \"hello world.txt\");    \r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.updatePageData();\r\n  };\r\n  handleEdit =item=>{\r\n    this.setState({\r\n      id: item.id,\r\n      item:item,\r\n      shouldOpenEditorDialog: true\r\n    })\r\n  }\r\n  handleDeleteItem = id => {\r\n    alert(id);\r\n    this.setState({\r\n      id,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    deleteItem(this.state.id).then(() => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updatePageData();\r\n  }\r\n\r\n  updatePageData = () => {\r\n    getAllItems().then(({ data }) => this.setState({\r\n       itemList: [...data.content], page:data.pageable.pageNumber+1\r\n      }));\r\n  };    \r\n  render(){\r\n    const divStyle={\r\n      overflowX: 'scroll',\r\n      //border:'1px solid red',\r\n      position:'relative'\r\n    };\r\n    let {\r\n      rowsPerPage,\r\n      page,\r\n      itemList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog,\r\n    } = this.state;    \r\n    let rows =[];\r\n    for (var j = 0; j < itemList.length; j++) { \r\n      var item = itemList[j];\r\n      let action =\r\n      <span>\r\n      <button onClick={() =>\r\n          this.handleEdit(item)\r\n        }>Edit {item.name}</button>\r\n      <button onClick={() =>\r\n          this.handleDeleteItem(item.id)\r\n        }>Delete {item.id}</button>     \r\n      </span>;        \r\n      item.action=action;\r\n      rows.push(item);\r\n  }    \r\n    let data = {\r\n        columns:[\r\n          {\r\n            label: 'Name',\r\n            field: 'name',\r\n            sort: 'asc',\r\n            width: 150\r\n          },\r\n          {\r\n            label: 'Code',\r\n            field: 'code',\r\n            sort: 'asc',\r\n            width: 270\r\n          },\r\n          {\r\n            label: 'Level',\r\n            field: 'level',\r\n            sort: 'asc',\r\n            width: 270\r\n          }\r\n          ,\r\n          {\r\n            label: 'Action',\r\n            field: 'action',\r\n            sort: 'asc',\r\n            width: 270\r\n          }\r\n      ],\r\n      rows:rows\r\n    }\r\n    console.log(rows);\r\n    return (\r\n      <div>\r\n      <MDBContainer>\r\n      {shouldOpenEditorDialog && (\r\n            <DatatableEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}           \r\n        <MDBDataTableFooter scrollY scrollX maxHeight=\"300px\"\r\n          striped\r\n          bordered\r\n          small\r\n          data={data}\r\n          exportToCSV={true}\r\n          info={false}\r\n          visibleLabel={false}\r\n          \r\n          />\r\n      </MDBContainer>\r\n      </div>\r\n\r\n    );\r\n  }\r\n  \r\n}\r\nexport default DatatablePage;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _delaunator = _interopRequireDefault(require(\"delaunator/delaunator.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // From https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js\n\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\nfunction area(hull, points) {\n  var n = hull.length;\n  var x0;\n  var y0;\n  var x1 = points[2 * hull[n - 1]];\n  var y1 = points[2 * hull[n - 1] + 1];\n  var a = 0;\n\n  for (var i = 0; i < n; i++) {\n    x0 = x1;\n    y0 = y1;\n    x1 = points[2 * hull[i]];\n    y1 = points[2 * hull[i] + 1];\n    a += y0 * x1 - x0 * y1;\n  }\n\n  return a / 2;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n} // eslint-disable-next-line max-params\n\n\nfunction flatArray(points, fx, fy, that) {\n  var n = points.length;\n  var array = new Float64Array(n * 2);\n\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n\n  return array;\n}\n\nvar Delaunay = /*#__PURE__*/function () {\n  function Delaunay(points) {\n    var delaunator = new _delaunator[\"default\"](points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = delaunator.coords;\n\n    this._init(delaunator);\n  } // eslint-disable-next-line max-statements, complexity\n\n\n  var _proto = Delaunay.prototype;\n\n  _proto._init = function _init(delaunator) {\n    var d = delaunator;\n    var points = this.points; // check for collinear\n    // eslint-disable-next-line no-magic-numbers\n\n    if (d.hull && d.hull.length > 2 && area(d.hull, points) < 1e-10) {\n      var collinear = Int32Array.from({\n        length: points.length / 2\n      }, function (_, i) {\n        return i;\n      }).sort(function (i, j) {\n        return points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1];\n      }); // for exact neighbors\n\n      var e = collinear[0];\n      var f = collinear[collinear.length - 1];\n      var bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]];\n      var r = 1e-8 * // eslint-disable-line no-magic-numbers\n      Math.sqrt(Math.pow(bounds[3] - bounds[1], 2) + Math.pow(bounds[2] - bounds[0], 2));\n\n      for (var i = 0, n = points.length / 2; i < n; ++i) {\n        var p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n\n      delaunator = new _delaunator[\"default\"](points);\n    }\n\n    var halfedges = this.halfedges = delaunator.halfedges;\n    var hull = this.hull = delaunator.hull;\n    var triangles = this.triangles = delaunator.triangles;\n    var inedges = this.inedges.fill(-1);\n\n    var hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n\n\n    for (var _e = 0, _n = halfedges.length; _e < _n; ++_e) {\n      var _p = triangles[_e % 3 === 2 ? _e - 2 : _e + 1];\n      if (halfedges[_e] === -1 || inedges[_p] === -1) inedges[_p] = _e;\n    }\n\n    for (var _i = 0, _n2 = hull.length; _i < _n2; ++_i) {\n      hullIndex[hull[_i]] = _i;\n    } // degenerate case: 1 or 2 (distinct) points\n\n\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  } // eslint-disable-next-line max-statements\n  ;\n\n  _proto.neighbors = function neighbors(i) {\n    var results = [];\n    var inedges = this.inedges,\n        hull = this.hull,\n        _hullIndex = this._hullIndex,\n        halfedges = this.halfedges,\n        triangles = this.triangles;\n    var e0 = inedges[i];\n    if (e0 === -1) return results; // coincident point\n\n    var e = e0;\n    var p0 = -1;\n\n    do {\n      p0 = triangles[e];\n      results.push(p0);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n\n      e = halfedges[e];\n\n      if (e === -1) {\n        var p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) results.push(p);\n        break;\n      }\n    } while (e !== e0);\n\n    return results;\n  };\n\n  _proto.find = function find(x, y, i) {\n    if (i === void 0) {\n      i = 0;\n    } // eslint-disable-next-line no-self-compare\n\n\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    var i0 = i;\n    var c;\n\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {\n      i = c;\n    }\n\n    return c;\n  };\n\n  _proto._step = function _step(i, x, y) {\n    var inedges = this.inedges,\n        points = this.points;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    var c = i;\n    var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);\n\n    for (var _iterator = this.neighbors(i), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i2 >= _iterator.length) break;\n        _ref = _iterator[_i2++];\n      } else {\n        _i2 = _iterator.next();\n        if (_i2.done) break;\n        _ref = _i2.value;\n      }\n\n      var t = _ref;\n      var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);\n\n      if (dt < dc) {\n        dc = dt;\n        c = t;\n      }\n    }\n\n    return c;\n  };\n\n  return Delaunay;\n}(); // eslint-disable-next-line max-params\n\n\nexports[\"default\"] = Delaunay;\n\nDelaunay.from = function (points, fx, fy, that) {\n  if (fx === void 0) {\n    fx = pointX;\n  }\n\n  if (fy === void 0) {\n    fy = pointY;\n  }\n\n  return new Delaunay(flatArray(points, fx, fy, that));\n}; // only public methods will be .from and .find","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/node_modules/delaunay-find/lib/index.js"],"names":["exports","__esModule","_delaunator","_interopRequireDefault","require","obj","pointX","p","pointY","area","hull","points","n","length","x0","y0","x1","y1","a","i","jitter","x","y","r","Math","sin","cos","flatArray","fx","fy","that","array","Float64Array","call","Delaunay","delaunator","inedges","Int32Array","_hullIndex","coords","_init","_proto","prototype","d","collinear","from","_","sort","j","e","f","bounds","sqrt","pow","halfedges","triangles","fill","hullIndex","_e","_n","_p","_i","_n2","neighbors","results","e0","p0","push","find","i0","c","_step","dc","_iterator","_isArray","Array","isArray","_i2","Symbol","iterator","_ref","next","done","value","t","dt"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _delaunator = _interopRequireDefault(require(\"delaunator/delaunator.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// From https://github.com/d3/d3-delaunay/blob/master/src/delaunay.js\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\nfunction area(hull, points) {\n  var n = hull.length;\n  var x0;\n  var y0;\n  var x1 = points[2 * hull[n - 1]];\n  var y1 = points[2 * hull[n - 1] + 1];\n  var a = 0;\n\n  for (var i = 0; i < n; i++) {\n    x0 = x1;\n    y0 = y1;\n    x1 = points[2 * hull[i]];\n    y1 = points[2 * hull[i] + 1];\n    a += y0 * x1 - x0 * y1;\n  }\n\n  return a / 2;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n} // eslint-disable-next-line max-params\n\n\nfunction flatArray(points, fx, fy, that) {\n  var n = points.length;\n  var array = new Float64Array(n * 2);\n\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n\n  return array;\n}\n\nvar Delaunay =\n/*#__PURE__*/\nfunction () {\n  function Delaunay(points) {\n    var delaunator = new _delaunator[\"default\"](points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = delaunator.coords;\n\n    this._init(delaunator);\n  } // eslint-disable-next-line max-statements, complexity\n\n\n  var _proto = Delaunay.prototype;\n\n  _proto._init = function _init(delaunator) {\n    var d = delaunator;\n    var points = this.points; // check for collinear\n    // eslint-disable-next-line no-magic-numbers\n\n    if (d.hull && d.hull.length > 2 && area(d.hull, points) < 1e-10) {\n      var collinear = Int32Array.from({\n        length: points.length / 2\n      }, function (_, i) {\n        return i;\n      }).sort(function (i, j) {\n        return points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1];\n      }); // for exact neighbors\n\n      var e = collinear[0];\n      var f = collinear[collinear.length - 1];\n      var bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]];\n      var r = 1e-8 * // eslint-disable-line no-magic-numbers\n      Math.sqrt(Math.pow(bounds[3] - bounds[1], 2) + Math.pow(bounds[2] - bounds[0], 2));\n\n      for (var i = 0, n = points.length / 2; i < n; ++i) {\n        var p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n\n      delaunator = new _delaunator[\"default\"](points);\n    }\n\n    var halfedges = this.halfedges = delaunator.halfedges;\n    var hull = this.hull = delaunator.hull;\n    var triangles = this.triangles = delaunator.triangles;\n    var inedges = this.inedges.fill(-1);\n\n    var hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n\n\n    for (var _e = 0, _n = halfedges.length; _e < _n; ++_e) {\n      var _p = triangles[_e % 3 === 2 ? _e - 2 : _e + 1];\n      if (halfedges[_e] === -1 || inedges[_p] === -1) inedges[_p] = _e;\n    }\n\n    for (var _i = 0, _n2 = hull.length; _i < _n2; ++_i) {\n      hullIndex[hull[_i]] = _i;\n    } // degenerate case: 1 or 2 (distinct) points\n\n\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  } // eslint-disable-next-line max-statements\n  ;\n\n  _proto.neighbors = function neighbors(i) {\n    var results = [];\n    var inedges = this.inedges,\n        hull = this.hull,\n        _hullIndex = this._hullIndex,\n        halfedges = this.halfedges,\n        triangles = this.triangles;\n    var e0 = inedges[i];\n    if (e0 === -1) return results; // coincident point\n\n    var e = e0;\n    var p0 = -1;\n\n    do {\n      p0 = triangles[e];\n      results.push(p0);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n\n      e = halfedges[e];\n\n      if (e === -1) {\n        var p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) results.push(p);\n        break;\n      }\n    } while (e !== e0);\n\n    return results;\n  };\n\n  _proto.find = function find(x, y, i) {\n    if (i === void 0) {\n      i = 0;\n    }\n\n    // eslint-disable-next-line no-self-compare\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    var i0 = i;\n    var c;\n\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) {\n      i = c;\n    }\n\n    return c;\n  };\n\n  _proto._step = function _step(i, x, y) {\n    var inedges = this.inedges,\n        points = this.points;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    var c = i;\n    var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);\n\n    for (var _iterator = this.neighbors(i), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i2 >= _iterator.length) break;\n        _ref = _iterator[_i2++];\n      } else {\n        _i2 = _iterator.next();\n        if (_i2.done) break;\n        _ref = _i2.value;\n      }\n\n      var t = _ref;\n      var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);\n\n      if (dt < dc) {\n        dc = dt;\n        c = t;\n      }\n    }\n\n    return c;\n  };\n\n  return Delaunay;\n}(); // eslint-disable-next-line max-params\n\n\nexports[\"default\"] = Delaunay;\n\nDelaunay.from = function (points, fx, fy, that) {\n  if (fx === void 0) {\n    fx = pointX;\n  }\n\n  if (fy === void 0) {\n    fy = pointY;\n  }\n\n  return new Delaunay(flatArray(points, fx, fy, that));\n}; // only public methods will be .from and .find"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\AdministrativeUnit\\\\React15TabulatorSample.js\";\nimport React from \"react\";\nimport \"./styles.css\"; // import \"react-tabulator/lib/styles.css\"; // default theme\n\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\n// for React 16.4.x use: import { ReactTabulator }\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\n\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\n\nimport { saveAs } from 'file-saver';\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport ConstantList from \"../../appConfig\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport { IconButton, Table, TableHead, TableBody, TableRow, TableCell, Icon, TablePagination, TableContainer, Button, Card } from \"@material-ui/core\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  width: \"20%\"\n}, {\n  title: \"Age\",\n  field: \"age\",\n  align: \"left\",\n  formatter: \"progress\",\n  width: \"20%\"\n}, {\n  title: \"Favourite Color\",\n  field: \"col\",\n  width: \"20%\"\n}, {\n  title: \"Date Of Birth\",\n  field: \"dob\",\n  align: \"center\",\n  width: 150\n}, {\n  title: \"Rating\",\n  field: \"rating\",\n  align: \"center\",\n  formatter: \"star\",\n  width: 150\n}, {\n  title: \"Passed?\",\n  field: \"passed\",\n  align: \"center\",\n  formatter: \"tickCross\",\n  width: 150\n}]; // const columns = [\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\n// ];\n\nfunction SimpleButton(props) {\n  const _useTranslation = useTranslation(),\n        t = _useTranslation.t,\n        i18n = _useTranslation.i18n;\n\n  const cellData = props.cell._cell.row.data;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.onSelect(cellData, 0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, t(\"Edit\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.onSelect(cellData, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, t(\"Delete\")));\n} // function GetColumns(){\n//   const { t, i18n } = useTranslation();\n//   const columns = [\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\n//     {\n//       title: t(\"Action\"),\n//       field: \"custom\",\n//       align: \"left\",\n//       width: \"250\",\n//       formatter: reactFormatter(\n//         <SimpleButton\n//           onSelect={(item, method) => {\n//             if(method===0){\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\n//             }else {\n//               this.handleDeleteAdministrativeUnit(item.id);\n//             }\n//           }}\n//         />\n//       )\n//     }\n//   ];\n//   return columns;\n// }\n\n\nfunction DeleteData(cellData) {\n  alert(cellData.id);\n}\n\nconst data = [{\n  id: 1,\n  name: \"Oli Bob\",\n  age: \"12\",\n  col: \"red\",\n  dob: \"\",\n  rating: 5,\n  passed: true\n}, {\n  id: 2,\n  name: \"Mary May\",\n  age: \"1\",\n  col: \"green\",\n  dob: \"14/05/1989\",\n  rating: 4,\n  passed: true\n}, {\n  id: 3,\n  name: \"Christine Lobowski\",\n  age: \"42\",\n  col: \"green\",\n  dob: \"22/05/1985\",\n  rating: 4,\n  passed: false\n}, {\n  id: 4,\n  name: \"Brendon Philips\",\n  age: \"125\",\n  col: \"red\",\n  dob: \"01/08/1980\",\n  rating: 4.5,\n  passed: true\n}, {\n  id: 5,\n  name: \"Margret Marmajuke\",\n  age: \"16\",\n  col: \"yellow\",\n  dob: \"31/01/1999\",\n  rating: 4,\n  passed: false\n}, {\n  id: 6,\n  name: \"Van Ng\",\n  age: \"37\",\n  col: \"green\",\n  dob: \"06/15/1982\",\n  rating: 4,\n  passed: true\n}, {\n  id: 7,\n  name: \"Duc Ng\",\n  age: \"37\",\n  col: \"yellow\",\n  dob: \"10/15/1982\",\n  rating: 4,\n  passed: true\n}]; // Editable Example:\n\nconst colorOptions = {\n  [\"\"]: \"&nbsp;\",\n  red: \"red\",\n  green: \"green\",\n  yellow: \"yellow\"\n};\nconst editableColumns = [{\n  title: \"Name\",\n  field: \"name\",\n  width: 150,\n  editor: \"input\",\n  headerFilter: \"input\"\n}, {\n  title: \"Age\",\n  field: \"age\",\n  align: \"left\",\n  formatter: \"progress\",\n  editor: \"progress\"\n}, {\n  title: \"Favourite Color\",\n  field: \"col\",\n  editor: \"autocomplete\",\n  editorParams: {\n    allowEmpty: true,\n    showListOnEmpty: true,\n    values: colorOptions\n  },\n  headerFilter: \"select\",\n  headerFilterParams: {\n    values: colorOptions\n  }\n}, {\n  title: \"Date Of Birth\",\n  field: \"dob\",\n  align: \"center\",\n  editor: \"input\"\n}, {\n  title: \"Rating\",\n  field: \"rating\",\n  align: \"center\",\n  formatter: \"star\",\n  editor: true\n}, {\n  title: \"Passed?\",\n  field: \"passed\",\n  align: \"center\",\n  formatter: \"tickCross\",\n  editor: true\n}];\n\nclass React15TabulatorSample extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.ref = null;\n    this.state = {\n      rowsPerPage: 3,\n      page: 0,\n      data: [],\n      totalElements: 0,\n      administrativeList: [],\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false\n    };\n\n    this.SimpleButton = props => {\n      const cellData = props.cell._cell.row.data;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => props.onSelect(cellData, 0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => props.onSelect(cellData, 1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 7\n        }\n      }, \"Delete\"));\n    };\n\n    this.setPage = page => {\n      this.setState({\n        page\n      });\n    };\n\n    this.setRowsPerPage = event => {\n      this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      });\n      this.updatePageData(0, event.target.value);\n    };\n\n    this.handleChangePage = (event, newPage) => {\n      this.setPage(newPage); //alert(newPage+\"/\"+this.state.page);\n\n      this.updatePageData(newPage, this.state.rowsPerPage);\n    };\n\n    this.handleDownload = () => {\n      var blob = new Blob([\"Hello, world!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"hello world.txt\");\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n      this.setPage(0);\n      this.updatePageData(this.state.page, this.state.rowsPerPage);\n    };\n\n    this.handleDeleteAdministrativeUnit = id => {\n      this.setState({\n        id,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    this.handleConfirmationResponse = () => {\n      //alert(this.state.id);\n      deleteAdministrativeUnit(this.state.id).then(() => {\n        this.handleDialogClose();\n      });\n    };\n\n    this.handleEditItem = item => {\n      this.setState({\n        item: item,\n        shouldOpenEditorDialog: true\n      });\n    };\n\n    this.updatePageData = (pageIndex, pageSize) => {\n      getByPage(pageIndex, pageSize).then(({\n        data\n      }) => this.setState({\n        administrativeList: [...data.content],\n        totalElements: data.totalElements\n      }));\n    };\n\n    this.rowClick = (e, row) => {\n      console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\n\n      console.log(\"rowClick id: ${row.getData().id}\", row, e);\n    };\n\n    this.setData = () => {\n      this.setState({\n        data: this.state.administrativeList\n      });\n    };\n\n    this.clearData = () => {\n      this.setState({\n        data: []\n      });\n    };\n\n    this.GetColumns = col => {\n      return col;\n    };\n\n    this.rowClick = (e, row) => {\n      //alert(row.getData().name);\n      this.setState({\n        item: row.getData()\n      });\n      console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\n\n      console.log(\"rowClick id: ${row.getData().id}\", row, e);\n      this.setState({\n        selectedName: row.getData().name\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageData(this.state.page, this.state.rowsPerPage);\n  }\n\n  render() {\n    const _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n    let columns = [{\n      title: t(\"Name\"),\n      field: \"name\",\n      width: \"150\"\n    }, {\n      title: t(\"Code\"),\n      field: \"code\",\n      align: \"left\",\n      width: \"150\"\n    }, {\n      title: t(\"Level\"),\n      field: \"level\",\n      width: \"150\"\n    }, {\n      title: t(\"IsActive\"),\n      field: \"isActive\",\n      width: \"20%\"\n    }, {\n      title: t(\"Action\"),\n      field: \"custom\",\n      align: \"left\",\n      width: \"250\",\n      formatter: reactFormatter( /*#__PURE__*/React.createElement(SimpleButton, {\n        onSelect: (item, method) => {\n          if (method === 0) {\n            this.setState({\n              selectedItem: item,\n              shouldOpenEditorDialog: true\n            });\n          } else {\n            this.handleDeleteAdministrativeUnit(item.id);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }\n      }))\n    }];\n    const options = {\n      height: \"90%\",\n      movableRows: false //pagination: 'local',\n      //ajaxURL: ConstantList.API_ENPOINT+\"/api/administrativeunit/1/10\",\n      //current_page: 1,     \n      //paginationSize:1,\n      // pageLoaded:function(pageno){\n      //       alert('PageLoad')\n      // },\n\n    };\n    const options1 = {\n      height: \"90%\",\n      movableRows: false,\n      //pagination: 'local',\n      pagination: \"remote\",\n      ajaxURL: ConstantList.API_ENPOINT + \"/public/animal\",\n      current_page: 1,\n      paginationSize: 1,\n      pageLoaded: function pageLoaded(pageno) {\n        alert(pageno);\n      }\n    };\n    let _this$state = this.state,\n        rowsPerPage = _this$state.rowsPerPage,\n        page = _this$state.page,\n        administrativeList = _this$state.administrativeList,\n        shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n        shouldOpenEditorDialog = _this$state.shouldOpenEditorDialog;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-16\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.setState({\n        shouldOpenEditorDialog: true,\n        item: {}\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }\n    }, t('AdministrativeUnitTable.AddNew')), shouldOpenEditorDialog && /*#__PURE__*/React.createElement(AdministrativeUnitEditorDialog, {\n      handleClose: this.handleDialogClose,\n      open: this.state.shouldOpenEditorDialog,\n      item: this.state.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }\n    }), shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n      open: shouldOpenConfirmationDialog,\n      onConfirmDialogClose: this.handleDialogClose,\n      onYesClick: this.handleConfirmationResponse,\n      text: \"Are you sure to delete?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(React15Tabulator, {\n      ref: _ref => this.ref = _ref,\n      columns: columns,\n      data: administrativeList,\n      rowClick: this.rowClick,\n      options: options,\n      \"data-custom-attr\": \"test-custom-attribute\",\n      className: \"custom-css-class\",\n      resizableColumns: \"false\",\n      movableColumns: \"false\",\n      scrollToColumnIfVisible: \"true\",\n      selectableRollingSelection: \"false\" //min-width=\"750px\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TablePagination, {\n      align: \"left\",\n      className: \"px-16\",\n      rowsPerPageOptions: [1, 2, 3, 5, 10, 25],\n      component: \"div\",\n      count: this.state.totalElements,\n      rowsPerPage: this.state.rowsPerPage,\n      page: this.state.page,\n      backIconButtonProps: {\n        \"aria-label\": \"Previous Page\"\n      },\n      nextIconButtonProps: {\n        \"aria-label\": \"Next Page\"\n      },\n      onChangePage: this.handleChangePage,\n      onChangeRowsPerPage: this.setRowsPerPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(React15Tabulator, {\n      ref: _ref2 => this.ref = _ref2,\n      columns: columns,\n      data: data,\n      rowClick: this.rowClick,\n      options: options1,\n      \"data-custom-attr\": \"test-custom-attribute\",\n      className: \"custom-css-class\",\n      resizableColumns: \"false\",\n      \"min-width\": \"750px\",\n      resizableColumns: \"false\",\n      movableColumns: \"false\",\n      scrollToColumnIfVisible: \"true\",\n      selectableRollingSelection: \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 10\n      }\n    }));\n  }\n\n}\n\nexport default React15TabulatorSample;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/AdministrativeUnit/React15TabulatorSample.js"],"names":["React","React15Tabulator","reactFormatter","saveAs","getAllAdministrativeUnits","deleteAdministrativeUnit","getByPage","AdministrativeUnitEditorDialog","Breadcrumb","ConfirmationDialog","ConstantList","useTranslation","withTranslation","Trans","IconButton","Table","TableHead","TableBody","TableRow","TableCell","Icon","TablePagination","TableContainer","Button","Card","columns","title","field","width","align","formatter","SimpleButton","props","t","i18n","cellData","cell","_cell","row","data","onSelect","DeleteData","alert","id","name","age","col","dob","rating","passed","colorOptions","red","green","yellow","editableColumns","editor","headerFilter","editorParams","allowEmpty","showListOnEmpty","values","headerFilterParams","React15TabulatorSample","Component","ref","state","rowsPerPage","page","totalElements","administrativeList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","setPage","setState","setRowsPerPage","event","target","value","updatePageData","handleChangePage","newPage","handleDownload","blob","Blob","type","handleDialogClose","handleDeleteAdministrativeUnit","handleConfirmationResponse","then","handleEditItem","item","pageIndex","pageSize","content","rowClick","e","console","log","table","setData","clearData","GetColumns","getData","selectedName","componentDidMount","render","method","selectedItem","options","height","movableRows","options1","pagination","ajaxURL","API_ENPOINT","current_page","paginationSize","pageLoaded","pageno"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP,C,CAEA;;AACA,OAAO,+DAAP,C,CAAwE;AAExE;AACA;;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,iBAAjD,C,CAAoE;;AAEpE,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,yBAAT,EAAoCC,wBAApC,EAA8DC,SAA9D,QAA+E,6BAA/E;AACA,OAAOC,8BAAP,MAA2C,kCAA3C;AACA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,OAA/C;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,KAA1C,QAAuD,eAAvD;AACA,SACEC,UADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,IAPF,EAQEC,eARF,EASEC,cATF,EAUEC,MAVF,EAWEC,IAXF,QAYO,mBAZP;AAaA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,KAAK,EAAE,MAAxB;AAAgCC,EAAAA,KAAK,EAAE;AAAvC,CADc,EAEd;AAAEF,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE,KAAvB;AAA8BE,EAAAA,KAAK,EAAE,MAArC;AAA6CC,EAAAA,SAAS,EAAE,UAAxD;AAAqEF,EAAAA,KAAK,EAAE;AAA5E,CAFc,EAGd;AAAEF,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,KAAK,EAAE,KAAnC;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAHc,EAId;AAAEF,EAAAA,KAAK,EAAE,eAAT;AAA0BC,EAAAA,KAAK,EAAE,KAAjC;AAAwCE,EAAAA,KAAK,EAAE,QAA/C;AAA0DD,EAAAA,KAAK,EAAE;AAAjE,CAJc,EAKd;AAAEF,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,KAAK,EAAE,QAA1B;AAAoCE,EAAAA,KAAK,EAAE,QAA3C;AAAqDC,EAAAA,SAAS,EAAE,MAAhE;AAAyEF,EAAAA,KAAK,EAAE;AAAhF,CALc,EAMd;AAAEF,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE,QAA3B;AAAqCE,EAAAA,KAAK,EAAE,QAA5C;AAAsDC,EAAAA,SAAS,EAAE,WAAjE;AAA+EF,EAAAA,KAAK,EAAE;AAAtF,CANc,CAAhB,C,CAQA;AACA;AACA;AACA;AACA;;AAEA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,0BACPrB,cAAc,EADP;AAAA,QACnBsB,CADmB,mBACnBA,CADmB;AAAA,QAChBC,IADgB,mBAChBA,IADgB;;AAE3B,QAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAtC;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL;AAAQ,IAAA,OAAO,EAAE,MAAMP,KAAK,CAACQ,QAAN,CAAeL,QAAf,EAAwB,CAAxB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDF,CAAC,CAAC,MAAD,CAArD,CADK,eAEL;AAAQ,IAAA,OAAO,EAAE,MAAMD,KAAK,CAACQ,QAAN,CAAeL,QAAf,EAAwB,CAAxB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDF,CAAC,CAAC,QAAD,CAArD,CAFK,CAAP;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,UAAT,CAAoBN,QAApB,EAA6B;AAC3BO,EAAAA,KAAK,CAACP,QAAQ,CAACQ,EAAV,CAAL;AACD;;AACD,MAAMJ,IAAI,GAAG,CACX;AACEI,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,SAFR;AAGEC,EAAAA,GAAG,EAAE,IAHP;AAIEC,EAAAA,GAAG,EAAE,KAJP;AAKEC,EAAAA,GAAG,EAAE,EALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CADW,EAUX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,UAFR;AAGEC,EAAAA,GAAG,EAAE,GAHP;AAIEC,EAAAA,GAAG,EAAE,OAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CAVW,EAmBX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,oBAFR;AAGEC,EAAAA,GAAG,EAAE,IAHP;AAIEC,EAAAA,GAAG,EAAE,OAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CAnBW,EA4BX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,iBAFR;AAGEC,EAAAA,GAAG,EAAE,KAHP;AAIEC,EAAAA,GAAG,EAAE,KAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,GANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CA5BW,EAqCX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,mBAFR;AAGEC,EAAAA,GAAG,EAAE,IAHP;AAIEC,EAAAA,GAAG,EAAE,QAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CArCW,EA8CX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,GAAG,EAAE,IAHP;AAIEC,EAAAA,GAAG,EAAE,OAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CA9CW,EAuDX;AACEN,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,GAAG,EAAE,IAHP;AAIEC,EAAAA,GAAG,EAAE,QAJP;AAKEC,EAAAA,GAAG,EAAE,YALP;AAMEC,EAAAA,MAAM,EAAE,CANV;AAOEC,EAAAA,MAAM,EAAE;AAPV,CAvDW,CAAb,C,CAkEA;;AACA,MAAMC,YAAY,GAAG;AACnB,GAAC,EAAD,GAAM,QADa;AAEnBC,EAAAA,GAAG,EAAE,KAFc;AAGnBC,EAAAA,KAAK,EAAE,OAHY;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAArB;AAMA,MAAMC,eAAe,GAAG,CACtB;AACE5B,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,KAAK,EAAE,GAHT;AAIE2B,EAAAA,MAAM,EAAE,OAJV;AAKEC,EAAAA,YAAY,EAAE;AALhB,CADsB,EAQtB;AACE9B,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,KAAK,EAAE,KAFT;AAGEE,EAAAA,KAAK,EAAE,MAHT;AAIEC,EAAAA,SAAS,EAAE,UAJb;AAKEyB,EAAAA,MAAM,EAAE;AALV,CARsB,EAetB;AACE7B,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,KAFT;AAGE4B,EAAAA,MAAM,EAAE,cAHV;AAIEE,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,IADA;AAEZC,IAAAA,eAAe,EAAE,IAFL;AAGZC,IAAAA,MAAM,EAAEV;AAHI,GAJhB;AASEM,EAAAA,YAAY,EAAE,QAThB;AAUEK,EAAAA,kBAAkB,EAAE;AAAED,IAAAA,MAAM,EAAEV;AAAV;AAVtB,CAfsB,EA2BtB;AAAExB,EAAAA,KAAK,EAAE,eAAT;AAA0BC,EAAAA,KAAK,EAAE,KAAjC;AAAwCE,EAAAA,KAAK,EAAE,QAA/C;AAAyD0B,EAAAA,MAAM,EAAE;AAAjE,CA3BsB,EA4BtB;AACE7B,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEE,EAAAA,KAAK,EAAE,QAHT;AAIEC,EAAAA,SAAS,EAAE,MAJb;AAKEyB,EAAAA,MAAM,EAAE;AALV,CA5BsB,EAmCtB;AACE7B,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,QAFT;AAGEE,EAAAA,KAAK,EAAE,QAHT;AAIEC,EAAAA,SAAS,EAAE,WAJb;AAKEyB,EAAAA,MAAM,EAAE;AALV,CAnCsB,CAAxB;;AA4CA,MAAMO,sBAAN,SAAqC9D,KAAK,CAAC+D,SAA3C,CAAqD;AAAA;AAAA;AAAA,SACnDC,GADmD,GAC7C,IAD6C;AAAA,SAEnDC,KAFmD,GAE3C;AACNC,MAAAA,WAAW,EAAE,CADP;AAENC,MAAAA,IAAI,EAAE,CAFA;AAGN5B,MAAAA,IAAI,EAAE,EAHA;AAIN6B,MAAAA,aAAa,EAAC,CAJR;AAKNC,MAAAA,kBAAkB,EAAE,EALd;AAMNC,MAAAA,sBAAsB,EAAE,KANlB;AAONC,MAAAA,4BAA4B,EAAE;AAPxB,KAF2C;;AAAA,SAWnDxC,YAXmD,GAWrCC,KAAD,IAAS;AACpB,YAAMG,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAtC;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACL;AAAQ,QAAA,OAAO,EAAE,MAAMP,KAAK,CAACQ,QAAN,CAAeL,QAAf,EAAwB,CAAxB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADK,eAEL;AAAQ,QAAA,OAAO,EAAE,MAAMH,KAAK,CAACQ,QAAN,CAAeL,QAAf,EAAwB,CAAxB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFK,CAAP;AAID,KAjBkD;;AAAA,SAkBnDqC,OAlBmD,GAkBzCL,IAAI,IAAI;AAChB,WAAKM,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACD,KApBkD;;AAAA,SAsBnDO,cAtBmD,GAsBlCC,KAAK,IAAI;AACxB,WAAKF,QAAL,CAAc;AAAEP,QAAAA,WAAW,EAAES,KAAK,CAACC,MAAN,CAAaC,KAA5B;AAAmCV,QAAAA,IAAI,EAAC;AAAxC,OAAd;AACA,WAAKW,cAAL,CAAoB,CAApB,EAAsBH,KAAK,CAACC,MAAN,CAAaC,KAAnC;AACD,KAzBkD;;AAAA,SA2BnDE,gBA3BmD,GA2BhC,CAACJ,KAAD,EAAQK,OAAR,KAAoB;AACrC,WAAKR,OAAL,CAAaQ,OAAb,EADqC,CAErC;;AACA,WAAKF,cAAL,CAAoBE,OAApB,EAA4B,KAAKf,KAAL,CAAWC,WAAvC;AACD,KA/BkD;;AAAA,SAgCnDe,cAhCmD,GAgClC,MAAM;AACrB,UAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,eAAD,CAAT,EAA4B;AAACC,QAAAA,IAAI,EAAE;AAAP,OAA5B,CAAX;AACAjF,MAAAA,MAAM,CAAC+E,IAAD,EAAO,iBAAP,CAAN;AACD,KAnCkD;;AAAA,SAoCnDG,iBApCmD,GAoC/B,MAAM;AACxB,WAAKZ,QAAL,CAAc;AACZH,QAAAA,sBAAsB,EAAE,KADZ;AAEZC,QAAAA,4BAA4B,EAAE;AAFlB,OAAd;AAIA,WAAKC,OAAL,CAAa,CAAb;AACA,WAAKM,cAAL,CAAoB,KAAKb,KAAL,CAAWE,IAA/B,EAAoC,KAAKF,KAAL,CAAWC,WAA/C;AACD,KA3CkD;;AAAA,SA6CnDoB,8BA7CmD,GA6ClB3C,EAAE,IAAI;AACrC,WAAK8B,QAAL,CAAc;AACZ9B,QAAAA,EADY;AAEZ4B,QAAAA,4BAA4B,EAAE;AAFlB,OAAd;AAID,KAlDkD;;AAAA,SAoDnDgB,0BApDmD,GAoDtB,MAAM;AACjC;AACAlF,MAAAA,wBAAwB,CAAC,KAAK4D,KAAL,CAAWtB,EAAZ,CAAxB,CAAwC6C,IAAxC,CAA6C,MAAM;AACjD,aAAKH,iBAAL;AACD,OAFD;AAGD,KAzDkD;;AAAA,SA0DnDI,cA1DmD,GA0DlCC,IAAI,IAAI;AACvB,WAAKjB,QAAL,CAAc;AACZiB,QAAAA,IAAI,EAACA,IADO;AAEZpB,QAAAA,sBAAsB,EAAE;AAFZ,OAAd;AAID,KA/DkD;;AAAA,SAoEnDQ,cApEmD,GAoElC,CAACa,SAAD,EAAYC,QAAZ,KAAyB;AACxCtF,MAAAA,SAAS,CAACqF,SAAD,EAAWC,QAAX,CAAT,CAA8BJ,IAA9B,CAAmC,CAAC;AAAEjD,QAAAA;AAAF,OAAD,KAAc,KAAKkC,QAAL,CAAc;AAC5DJ,QAAAA,kBAAkB,EAAE,CAAC,GAAG9B,IAAI,CAACsD,OAAT,CADwC;AACrBzB,QAAAA,aAAa,EAAC7B,IAAI,CAAC6B;AADE,OAAd,CAAjD;AAGD,KAxEkD;;AAAA,SA4EnD0B,QA5EmD,GA4ExC,CAACC,CAAD,EAAIzD,GAAJ,KAAY;AACrB0D,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKjC,GAAL,CAASkC,KAApC,EADqB,CACuB;;AAC5CF,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD3D,GAAhD,EAAqDyD,CAArD;AACD,KA/EkD;;AAAA,SAiFnDI,OAjFmD,GAiFzC,MAAM;AACd,WAAK1B,QAAL,CAAc;AAAElC,QAAAA,IAAI,EAAC,KAAK0B,KAAL,CAAWI;AAAlB,OAAd;AACD,KAnFkD;;AAAA,SAqFnD+B,SArFmD,GAqFvC,MAAM;AAChB,WAAK3B,QAAL,CAAc;AAAElC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,KAvFkD;;AAAA,SAwFnD8D,UAxFmD,GAwFrCvD,GAAD,IAAO;AAClB,aAAOA,GAAP;AACD,KA1FkD;;AAAA,SAmHnDgD,QAnHmD,GAmHxC,CAACC,CAAD,EAAIzD,GAAJ,KAAY;AACrB;AACA,WAAKmC,QAAL,CAAc;AAACiB,QAAAA,IAAI,EAACpD,GAAG,CAACgE,OAAJ;AAAN,OAAd;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKjC,GAAL,CAASkC,KAApC,EAHqB,CAGuB;;AAC5CF,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD3D,GAAhD,EAAqDyD,CAArD;AACA,WAAKtB,QAAL,CAAc;AAAE8B,QAAAA,YAAY,EAAEjE,GAAG,CAACgE,OAAJ,GAAc1D;AAA9B,OAAd;AACD,KAzHkD;AAAA;;AAgEnD4D,EAAAA,iBAAiB,GAAG;AAClB,SAAK1B,cAAL,CAAoB,KAAKb,KAAL,CAAWE,IAA/B,EAAoC,KAAKF,KAAL,CAAWC,WAA/C;AACD;;AAwDDuC,EAAAA,MAAM,GAAG;AAAA,wBACa,KAAKzE,KADlB;AAAA,UACCC,CADD,eACCA,CADD;AAAA,UACIC,IADJ,eACIA,IADJ;AAEP,QAAIT,OAAO,GAAG,CACZ;AAAEC,MAAAA,KAAK,EAAEO,CAAC,CAAC,MAAD,CAAV;AAAoBN,MAAAA,KAAK,EAAE,MAA3B;AAAmCC,MAAAA,KAAK,EAAE;AAA1C,KADY,EAEZ;AAAEF,MAAAA,KAAK,EAAEO,CAAC,CAAC,MAAD,CAAV;AAAoBN,MAAAA,KAAK,EAAE,MAA3B;AAAmCE,MAAAA,KAAK,EAAE,MAA1C;AAAkDD,MAAAA,KAAK,EAAE;AAAzD,KAFY,EAGZ;AAAEF,MAAAA,KAAK,EAAEO,CAAC,CAAC,OAAD,CAAV;AAAqBN,MAAAA,KAAK,EAAE,OAA5B;AAAqCC,MAAAA,KAAK,EAAE;AAA5C,KAHY,EAIZ;AAAEF,MAAAA,KAAK,EAAEO,CAAC,CAAC,UAAD,CAAV;AAAwBN,MAAAA,KAAK,EAAE,UAA/B;AAA2CC,MAAAA,KAAK,EAAE;AAAlD,KAJY,EAKZ;AACEF,MAAAA,KAAK,EAAEO,CAAC,CAAC,QAAD,CADV;AAEEN,MAAAA,KAAK,EAAE,QAFT;AAGEE,MAAAA,KAAK,EAAE,MAHT;AAIED,MAAAA,KAAK,EAAE,KAJT;AAKEE,MAAAA,SAAS,EAAE5B,cAAc,eACvB,oBAAC,YAAD;AACE,QAAA,QAAQ,EAAE,CAACwF,IAAD,EAAOgB,MAAP,KAAkB;AAC1B,cAAGA,MAAM,KAAG,CAAZ,EAAc;AACZ,iBAAKjC,QAAL,CAAc;AAAEkC,cAAAA,YAAY,EAAEjB,IAAhB;AAAsBpB,cAAAA,sBAAsB,EAAE;AAA9C,aAAd;AACD,WAFD,MAEM;AACJ,iBAAKgB,8BAAL,CAAoCI,IAAI,CAAC/C,EAAzC;AACD;AACF,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADuB;AAL3B,KALY,CAAd;AAuBA,UAAMiE,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,WAAW,EAAE,KAFC,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;;AATc,KAAhB;AAYA,UAAMC,QAAQ,GAAG;AACfF,MAAAA,MAAM,EAAE,KADO;AAEfC,MAAAA,WAAW,EAAE,KAFE;AAGf;AACAE,MAAAA,UAAU,EAAC,QAJI;AAKfC,MAAAA,OAAO,EAAEvG,YAAY,CAACwG,WAAb,GAAyB,gBALnB;AAMfC,MAAAA,YAAY,EAAE,CANC;AAOfC,MAAAA,cAAc,EAAC,CAPA;AAQfC,MAAAA,UAAU,EAAC,oBAASC,MAAT,EAAgB;AACzB5E,QAAAA,KAAK,CAAC4E,MAAD,CAAL;AACD;AAVc,KAAjB;AArCO,sBAuDH,KAAKrD,KAvDF;AAAA,QAkDLC,WAlDK,eAkDLA,WAlDK;AAAA,QAmDLC,IAnDK,eAmDLA,IAnDK;AAAA,QAoDLE,kBApDK,eAoDLA,kBApDK;AAAA,QAqDLE,4BArDK,eAqDLA,4BArDK;AAAA,QAsDLD,sBAtDK,eAsDLA,sBAtDK;AAwDP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAE,MAAM,KAAKG,QAAL,CAAc;AAAEH,QAAAA,sBAAsB,EAAE,IAA1B;AAA+BoB,QAAAA,IAAI,EAAC;AAApC,OAAd,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGzD,CAAC,CAAC,gCAAD,CANJ,CADF,EASKqC,sBAAsB,iBACrB,oBAAC,8BAAD;AACE,MAAA,WAAW,EAAE,KAAKe,iBADpB;AAEE,MAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWK,sBAFnB;AAGE,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWyB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVN,EAiBKnB,4BAA4B,iBAC3B,oBAAC,kBAAD;AACE,MAAA,IAAI,EAAEA,4BADR;AAEE,MAAA,oBAAoB,EAAE,KAAKc,iBAF7B;AAGE,MAAA,UAAU,EAAE,KAAKE,0BAHnB;AAIE,MAAA,IAAI,EAAC,yBAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBN,eA0BE,oBAAC,gBAAD;AACE,MAAA,GAAG,EAAEvB,IAAG,IAAK,KAAKA,GAAL,GAAWA,IAD1B;AAEE,MAAA,OAAO,EAAEvC,OAFX;AAGE,MAAA,IAAI,EAAE4C,kBAHR;AAIE,MAAA,QAAQ,EAAE,KAAKyB,QAJjB;AAKE,MAAA,OAAO,EAAEc,OALX;AAME,0BAAiB,uBANnB;AAOE,MAAA,SAAS,EAAC,kBAPZ;AAQE,MAAA,gBAAgB,EAAC,OARnB;AAQ2B,MAAA,cAAc,EAAC,OAR1C;AAQkD,MAAA,uBAAuB,EAAC,MAR1E;AAQiF,MAAA,0BAA0B,EAAC,OAR5G,CASE;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,eAuCI,oBAAC,eAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,SAAS,EAAC,OAFZ;AAGE,MAAA,kBAAkB,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAU,EAAV,EAAc,EAAd,CAHtB;AAIE,MAAA,SAAS,EAAC,KAJZ;AAKE,MAAA,KAAK,EAAE,KAAK3C,KAAL,CAAWG,aALpB;AAME,MAAA,WAAW,EAAE,KAAKH,KAAL,CAAWC,WAN1B;AAOE,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,IAPnB;AAQE,MAAA,mBAAmB,EAAE;AACnB,sBAAc;AADK,OARvB;AAWE,MAAA,mBAAmB,EAAE;AACnB,sBAAc;AADK,OAXvB;AAcE,MAAA,YAAY,EAAE,KAAKY,gBAdrB;AAeE,MAAA,mBAAmB,EAAE,KAAKL,cAf5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCJ,eAwDG,oBAAC,gBAAD;AACC,MAAA,GAAG,EAAEV,KAAG,IAAK,KAAKA,GAAL,GAAWA,KADzB;AAEC,MAAA,OAAO,EAAEvC,OAFV;AAGC,MAAA,IAAI,EAAEc,IAHP;AAIC,MAAA,QAAQ,EAAE,KAAKuD,QAJhB;AAKC,MAAA,OAAO,EAAEiB,QALV;AAMC,0BAAiB,uBANlB;AAOC,MAAA,SAAS,EAAC,kBAPX;AAQC,MAAA,gBAAgB,EAAC,OARlB;AASC,mBAAU,OATX;AAUD,MAAA,gBAAgB,EAAC,OAVhB;AAUwB,MAAA,cAAc,EAAC,OAVvC;AAU+C,MAAA,uBAAuB,EAAC,MAVvE;AAU8E,MAAA,0BAA0B,EAAC,OAVzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxDH,CADF;AA2FD;;AA7QkD;;AAgRrD,eAAejD,sBAAf","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n// import \"react-tabulator/lib/styles.css\"; // default theme\r\nimport \"react-tabulator/lib/css/bootstrap/tabulator_bootstrap.min.css\"; // use Theme(s)\r\n\r\n// for React 16.4.x use: import { ReactTabulator }\r\n//import { React15Tabulator } from \"react-tabulator\"; // for React 15.x\r\nimport { React15Tabulator, reactFormatter } from \"react-tabulator\"; // for React 15.x\r\n\r\nimport { saveAs } from 'file-saver';\r\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\r\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\r\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\r\nimport ConstantList from \"../../appConfig\";\r\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer,\r\n  Button,\r\n  Card\r\n} from \"@material-ui/core\";\r\nconst columns = [\r\n  { title: \"Name\", field: \"name\", width: \"20%\"},\r\n  { title: \"Age\", field: \"age\", align: \"left\", formatter: \"progress\" , width: \"20%\" },\r\n  { title: \"Favourite Color\", field: \"col\" , width: \"20%\"  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\" , width: 150 },\r\n  { title: \"Rating\", field: \"rating\", align: \"center\", formatter: \"star\" , width: 150 },\r\n  { title: \"Passed?\", field: \"passed\", align: \"center\", formatter: \"tickCross\" , width: 150 }\r\n];\r\n// const columns = [\r\n//   { title: \"Name\", field: \"name\", width: \"30%\"},\r\n//   { title: \"Code\", field: \"code\", align: \"left\", formatter: \"progress\" , width: \"40%\" },\r\n//   { title: \"Level\", field: \"level\" , width: \"30%\"  },\r\n// ];\r\n\r\nfunction SimpleButton(props) {\r\n  const { t, i18n } = useTranslation();\r\n  const cellData = props.cell._cell.row.data;\r\n  return <div> \r\n    <button onClick={() => props.onSelect(cellData,0)}>{t(\"Edit\")}</button> \r\n    <button onClick={() => props.onSelect(cellData,1)}>{t(\"Delete\")}</button> \r\n    </div>;\r\n}\r\n\r\n// function GetColumns(){\r\n//   const { t, i18n } = useTranslation();\r\n//   const columns = [\r\n//     { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n//     { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n//     { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n//     { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n//     {\r\n//       title: t(\"Action\"),\r\n//       field: \"custom\",\r\n//       align: \"left\",\r\n//       width: \"250\",\r\n//       formatter: reactFormatter(\r\n//         <SimpleButton\r\n//           onSelect={(item, method) => {\r\n//             if(method===0){\r\n//               this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n//             }else {\r\n//               this.handleDeleteAdministrativeUnit(item.id);\r\n//             }\r\n//           }}\r\n//         />\r\n//       )\r\n//     }\r\n//   ];\r\n//   return columns;\r\n// }\r\nfunction DeleteData(cellData){\r\n  alert(cellData.id);\r\n}\r\nconst data = [\r\n  {\r\n    id: 1,\r\n    name: \"Oli Bob\",\r\n    age: \"12\",\r\n    col: \"red\",\r\n    dob: \"\",\r\n    rating: 5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Mary May\",\r\n    age: \"1\",\r\n    col: \"green\",\r\n    dob: \"14/05/1989\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Christine Lobowski\",\r\n    age: \"42\",\r\n    col: \"green\",\r\n    dob: \"22/05/1985\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Brendon Philips\",\r\n    age: \"125\",\r\n    col: \"red\",\r\n    dob: \"01/08/1980\",\r\n    rating: 4.5,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Margret Marmajuke\",\r\n    age: \"16\",\r\n    col: \"yellow\",\r\n    dob: \"31/01/1999\",\r\n    rating: 4,\r\n    passed: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Van Ng\",\r\n    age: \"37\",\r\n    col: \"green\",\r\n    dob: \"06/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Duc Ng\",\r\n    age: \"37\",\r\n    col: \"yellow\",\r\n    dob: \"10/15/1982\",\r\n    rating: 4,\r\n    passed: true\r\n  }\r\n];\r\n\r\n// Editable Example:\r\nconst colorOptions = {\r\n  [\"\"]: \"&nbsp;\",\r\n  red: \"red\",\r\n  green: \"green\",\r\n  yellow: \"yellow\"\r\n};\r\nconst editableColumns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    width: 150,\r\n    editor: \"input\",\r\n    headerFilter: \"input\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    field: \"age\",\r\n    align: \"left\",\r\n    formatter: \"progress\",\r\n    editor: \"progress\"\r\n  },\r\n  {\r\n    title: \"Favourite Color\",\r\n    field: \"col\",\r\n    editor: \"autocomplete\",\r\n    editorParams: {\r\n      allowEmpty: true,\r\n      showListOnEmpty: true,\r\n      values: colorOptions\r\n    },\r\n    headerFilter: \"select\",\r\n    headerFilterParams: { values: colorOptions }\r\n  },\r\n  { title: \"Date Of Birth\", field: \"dob\", align: \"center\", editor: \"input\" },\r\n  {\r\n    title: \"Rating\",\r\n    field: \"rating\",\r\n    align: \"center\",\r\n    formatter: \"star\",\r\n    editor: true\r\n  },\r\n  {\r\n    title: \"Passed?\",\r\n    field: \"passed\",\r\n    align: \"center\",\r\n    formatter: \"tickCross\",\r\n    editor: true\r\n  }\r\n];\r\n\r\nclass React15TabulatorSample extends React.Component {\r\n  ref = null;\r\n  state = {\r\n    rowsPerPage: 3,\r\n    page: 0,\r\n    data: [],\r\n    totalElements:0,\r\n    administrativeList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  SimpleButton=(props)=>{\r\n    const cellData = props.cell._cell.row.data;\r\n    return <div> \r\n      <button onClick={() => props.onSelect(cellData,0)}>Edit</button> \r\n      <button onClick={() => props.onSelect(cellData,1)}>Delete</button> \r\n      </div>;\r\n  }\r\n  setPage = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  setRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value, page:0});\r\n    this.updatePageData(0,event.target.value);\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setPage(newPage);\r\n    //alert(newPage+\"/\"+this.state.page);\r\n    this.updatePageData(newPage,this.state.rowsPerPage);\r\n  };\r\n  handleDownload = () => {\r\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, \"hello world.txt\");    \r\n  }\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.setPage(0);\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  };\r\n\r\n  handleDeleteAdministrativeUnit = id => {\r\n    this.setState({\r\n      id,\r\n      shouldOpenConfirmationDialog: true\r\n    });\r\n  };\r\n\r\n  handleConfirmationResponse = () => {\r\n    //alert(this.state.id);\r\n    deleteAdministrativeUnit(this.state.id).then(() => {\r\n      this.handleDialogClose();\r\n    });\r\n  };\r\n  handleEditItem = item => {\r\n    this.setState({\r\n      item:item,\r\n      shouldOpenEditorDialog: true\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.updatePageData(this.state.page,this.state.rowsPerPage);\r\n  }\r\n\r\n  updatePageData = (pageIndex, pageSize) => { \r\n    getByPage(pageIndex,pageSize).then(({ data }) => this.setState({\r\n       administrativeList: [...data.content], totalElements:data.totalElements\r\n      }));\r\n  };\r\n\r\n\r\n\r\n  rowClick = (e, row) => {\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n  };\r\n\r\n  setData = () => {\r\n    this.setState({ data:this.state.administrativeList });\r\n  };\r\n\r\n  clearData = () => {\r\n    this.setState({ data: [] });\r\n  };\r\n  GetColumns = (col)=>{\r\n    return col;\r\n  } \r\n  // [\r\n  //   { title: \"Name\", field: \"name\", width: \"150\"},\r\n  //   { title: \"Code\", field: \"code\", align: \"left\", width: \"150\"},\r\n  //   { title: \"Level\", field: \"level\", width: \"150\"},\r\n  //   { title: \"IsActive\", field: \"isActive\", width: \"20%\"},\r\n  //   {\r\n  //     title: \"Action\",\r\n  //     field: \"custom\",\r\n  //     align: \"left\",\r\n  //     width: \"250\",\r\n  //     formatter: reactFormatter(\r\n  //       <this.SimpleButton \r\n  //         onSelect={(item, method) => {\r\n  //           if(method===0){\r\n  //             this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n  //           }else {\r\n  //             this.handleDeleteAdministrativeUnit(item.id);\r\n  //           } \r\n  //         }}\r\n  //       />\r\n  //     )\r\n  //   }\r\n  // ];\r\n\r\n  rowClick = (e, row) => {\r\n    //alert(row.getData().name);\r\n    this.setState({item:row.getData()});\r\n    console.log(\"ref table: \", this.ref.table); // this is the Tabulator table instance\r\n    console.log(\"rowClick id: ${row.getData().id}\", row, e);\r\n    this.setState({ selectedName: row.getData().name });\r\n  };\r\n  render() {\r\n    const { t, i18n } = this.props;\r\n    let columns = [\r\n      { title: t(\"Name\"), field: \"name\", width: \"150\"},\r\n      { title: t(\"Code\"), field: \"code\", align: \"left\", width: \"150\"},\r\n      { title: t(\"Level\"), field: \"level\", width: \"150\"},\r\n      { title: t(\"IsActive\"), field: \"isActive\", width: \"20%\"},\r\n      {\r\n        title: t(\"Action\"),\r\n        field: \"custom\",\r\n        align: \"left\",\r\n        width: \"250\",\r\n        formatter: reactFormatter(\r\n          <SimpleButton\r\n            onSelect={(item, method) => {\r\n              if(method===0){\r\n                this.setState({ selectedItem: item, shouldOpenEditorDialog: true});\r\n              }else {\r\n                this.handleDeleteAdministrativeUnit(item.id);\r\n              }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n    const options = {\r\n      height: \"90%\",\r\n      movableRows: false,\r\n      //pagination: 'local',\r\n      //ajaxURL: ConstantList.API_ENPOINT+\"/api/administrativeunit/1/10\",\r\n      //current_page: 1,     \r\n      //paginationSize:1,\r\n      // pageLoaded:function(pageno){\r\n      //       alert('PageLoad')\r\n      // },\r\n    };\r\n\r\n    const options1 = {\r\n      height: \"90%\",\r\n      movableRows: false,\r\n      //pagination: 'local',\r\n      pagination:\"remote\",\r\n      ajaxURL: ConstantList.API_ENPOINT+\"/public/animal\",\r\n      current_page: 1,     \r\n      paginationSize:1,\r\n      pageLoaded:function(pageno){\r\n        alert(pageno);\r\n      },\r\n    };\r\n    let {\r\n      rowsPerPage,\r\n      page,\r\n      administrativeList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog\r\n    } = this.state;\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"mb-16\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ shouldOpenEditorDialog: true,item:{} })}\r\n        >\r\n          {t('AdministrativeUnitTable.AddNew')}\r\n        </Button>          \r\n          {shouldOpenEditorDialog && (\r\n            <AdministrativeUnitEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={this.state.shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}   \r\n          \r\n          {shouldOpenConfirmationDialog && (\r\n            <ConfirmationDialog\r\n              open={shouldOpenConfirmationDialog}\r\n              onConfirmDialogClose={this.handleDialogClose}\r\n              onYesClick={this.handleConfirmationResponse}\r\n              text=\"Are you sure to delete?\"\r\n            />\r\n          )\r\n          }     \r\n        <React15Tabulator\r\n          ref={ref => (this.ref = ref)}\r\n          columns={columns}\r\n          data={administrativeList}\r\n          rowClick={this.rowClick}\r\n          options={options}\r\n          data-custom-attr=\"test-custom-attribute\"\r\n          className=\"custom-css-class\"\r\n          resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"\r\n          //min-width=\"750px\"\r\n        />\r\n        {/* <Pagination/> */}\r\n      \r\n          <TablePagination\r\n            align=\"left\"\r\n            className=\"px-16\"\r\n            rowsPerPageOptions={[1,2,3,5, 10, 25]}\r\n            component=\"div\"\r\n            count={this.state.totalElements}\r\n            rowsPerPage={this.state.rowsPerPage}\r\n            page={this.state.page}\r\n            backIconButtonProps={{\r\n              \"aria-label\": \"Previous Page\"\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": \"Next Page\"\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.setRowsPerPage}\r\n          />\r\n         <React15Tabulator\r\n          ref={ref => (this.ref = ref)}\r\n          columns={columns}\r\n          data={data}\r\n          rowClick={this.rowClick}\r\n          options={options1}\r\n          data-custom-attr=\"test-custom-attribute\"\r\n          className=\"custom-css-class\"\r\n          resizableColumns=\"false\"\r\n          min-width=\"750px\"\r\n        resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"/> \r\n {/*\r\n        <h3>\r\n          Asynchronous data: (e.g. fetch) -{\" \"}\r\n          <button onClick={this.setData}>Set Data</button>\r\n          <button onClick={this.clearData}>Clear</button>\r\n        </h3>\r\n        <React15Tabulator columns={columns} data={this.state.data} resizableColumns=\"false\" movableColumns=\"false\" scrollToColumnIfVisible=\"true\" selectableRollingSelection=\"false\"/> \r\n\r\n        <h3>Editable Table</h3>\r\n        <React15Tabulator columns={editableColumns} data={data} />\r\n\r\n        <p>\r\n          <a href=\"https://github.com/ngduc/react-tabulator\" target=\"_blank\">\r\n            Back to: Github Repo: react-tabulator\r\n          </a>\r\n        </p>\r\n        <p>\r\n          <a href=\"http://tabulator.info/examples/4.0\" target=\"_blank\">\r\n            More Tabulator's Examples\r\n          </a>\r\n        </p> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React15TabulatorSample;\r\n"]},"metadata":{},"sourceType":"module"}
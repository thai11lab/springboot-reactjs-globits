{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar react_dom_1 = require(\"react-dom\");\n\nvar createCellEl = function createCellEl() {\n  var el = document.createElement('div');\n  el.style.height = '100%';\n  return el;\n}; // example: { title: 'Pets', field: 'pets', formatter: MultiValueFormatter, formatterParams: { style: 'PILL' } }\n// default style: comma separated plain text\n// other styles: PILL\n\n\nfunction default_1(cell, formatterParams, onRendered) {\n  var style = formatterParams.style || ''; // comma separated plain text\n\n  var arr = cell.getValue() || [];\n  var content = arr && arr.length > 0 && typeof arr[0] === 'string' ? React.createElement(\"span\", null, arr.join(', ')) : React.createElement(\"span\", null);\n\n  if (style === 'PILL') {\n    // TODO: use React.Fragment here to remove unnecessary div. (but will break React 15 example in Codesandbox)\n    content = React.createElement(\"div\", null, arr.map(function (item) {\n      return typeof item === 'string' ? React.createElement(\"span\", {\n        key: item\n      }, item) : React.createElement(\"span\", {\n        key: item.name\n      }, item.name);\n    }));\n  }\n\n  var el = createCellEl();\n  el.className = 'multi-value-formatter-content';\n  el.title = arr && arr.length > 0 && typeof arr[0] === 'string' ? arr.join(', ') : '';\n  react_dom_1.render(content, el);\n  return el;\n}\n\nexports[\"default\"] = default_1;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/node_modules/react-tabulator/lib/formatters/MultiValueFormatter.js"],"names":["exports","__esModule","React","require","react_dom_1","createCellEl","el","document","createElement","style","height","default_1","cell","formatterParams","onRendered","arr","getValue","content","length","join","map","item","key","name","className","title","render"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAIE,YAAY,GAAG,SAAfA,YAAe,GAAY;AAC3B,MAAIC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAT;AACAF,EAAAA,EAAE,CAACG,KAAH,CAASC,MAAT,GAAkB,MAAlB;AACA,SAAOJ,EAAP;AACH,CAJD,C,CAKA;AACA;AACA;;;AACA,SAASK,SAAT,CAAmBC,IAAnB,EAAyBC,eAAzB,EAA0CC,UAA1C,EAAsD;AAClD,MAAIL,KAAK,GAAGI,eAAe,CAACJ,KAAhB,IAAyB,EAArC,CADkD,CACT;;AACzC,MAAIM,GAAG,GAAGH,IAAI,CAACI,QAAL,MAAmB,EAA7B;AACA,MAAIC,OAAO,GAAGF,GAAG,IAAIA,GAAG,CAACG,MAAJ,GAAa,CAApB,IAAyB,OAAOH,GAAG,CAAC,CAAD,CAAV,KAAkB,QAA3C,GAAsDb,KAAK,CAACM,aAAN,CAAoB,MAApB,EAA4B,IAA5B,EAAkCO,GAAG,CAACI,IAAJ,CAAS,IAAT,CAAlC,CAAtD,GAA0GjB,KAAK,CAACM,aAAN,CAAoB,MAApB,EAA4B,IAA5B,CAAxH;;AACA,MAAIC,KAAK,KAAK,MAAd,EAAsB;AAClB;AACAQ,IAAAA,OAAO,GAAIf,KAAK,CAACM,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiCO,GAAG,CAACK,GAAJ,CAAQ,UAAUC,IAAV,EAAgB;AAChE,aAAO,OAAOA,IAAP,KAAgB,QAAhB,GAA2BnB,KAAK,CAACM,aAAN,CAAoB,MAApB,EAA4B;AAAEc,QAAAA,GAAG,EAAED;AAAP,OAA5B,EAA2CA,IAA3C,CAA3B,GAA8EnB,KAAK,CAACM,aAAN,CAAoB,MAApB,EAA4B;AAAEc,QAAAA,GAAG,EAAED,IAAI,CAACE;AAAZ,OAA5B,EAAgDF,IAAI,CAACE,IAArD,CAArF;AACH,KAF2C,CAAjC,CAAX;AAGH;;AACD,MAAIjB,EAAE,GAAGD,YAAY,EAArB;AACAC,EAAAA,EAAE,CAACkB,SAAH,GAAe,+BAAf;AACAlB,EAAAA,EAAE,CAACmB,KAAH,GAAWV,GAAG,IAAIA,GAAG,CAACG,MAAJ,GAAa,CAApB,IAAyB,OAAOH,GAAG,CAAC,CAAD,CAAV,KAAkB,QAA3C,GAAsDA,GAAG,CAACI,IAAJ,CAAS,IAAT,CAAtD,GAAuE,EAAlF;AACAf,EAAAA,WAAW,CAACsB,MAAZ,CAAmBT,OAAnB,EAA4BX,EAA5B;AACA,SAAOA,EAAP;AACH;;AACDN,OAAO,CAAC,SAAD,CAAP,GAAqBW,SAArB","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar React = require(\"react\");\nvar react_dom_1 = require(\"react-dom\");\nvar createCellEl = function () {\n    var el = document.createElement('div');\n    el.style.height = '100%';\n    return el;\n};\n// example: { title: 'Pets', field: 'pets', formatter: MultiValueFormatter, formatterParams: { style: 'PILL' } }\n// default style: comma separated plain text\n// other styles: PILL\nfunction default_1(cell, formatterParams, onRendered) {\n    var style = formatterParams.style || ''; // comma separated plain text\n    var arr = cell.getValue() || [];\n    var content = arr && arr.length > 0 && typeof arr[0] === 'string' ? React.createElement(\"span\", null, arr.join(', ')) : React.createElement(\"span\", null);\n    if (style === 'PILL') {\n        // TODO: use React.Fragment here to remove unnecessary div. (but will break React 15 example in Codesandbox)\n        content = (React.createElement(\"div\", null, arr.map(function (item) {\n            return typeof item === 'string' ? React.createElement(\"span\", { key: item }, item) : React.createElement(\"span\", { key: item.name }, item.name);\n        })));\n    }\n    var el = createCellEl();\n    el.className = 'multi-value-formatter-content';\n    el.title = arr && arr.length > 0 && typeof arr[0] === 'string' ? arr.join(', ') : '';\n    react_dom_1.render(content, el);\n    return el;\n}\nexports[\"default\"] = default_1;\n"]},"metadata":{},"sourceType":"script"}
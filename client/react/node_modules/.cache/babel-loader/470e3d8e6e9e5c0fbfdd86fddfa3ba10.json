{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\AdministrativeUnit\\\\AdministrativeUnitTable.jsx\";\nimport React, { Component } from \"react\";\nimport { IconButton, Table, TableHead, TableBody, TableRow, TableCell, Icon, TablePagination, TableContainer, Button, Card, Checkbox, TableSortLabel } from \"@material-ui/core\";\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport shortid from \"shortid\";\nimport { saveAs } from 'file-saver';\n\nclass AdministrativeUnitTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rowsPerPage: 10,\n      page: 0,\n      administrativeList: [],\n      item: {},\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false,\n      selectAllItem: false,\n      selectedList: [],\n      totalElements: 0,\n      shouldOpenConfirmationDeleteAllDialog: false\n    };\n    this.numSelected = 0;\n    this.rowCount = 0;\n\n    this.setPage = page => {\n      //this.setState({ page });\n      this.setState({\n        page\n      }, function () {\n        this.updatePageData();\n      });\n    };\n\n    this.setRowsPerPage = event => {\n      this.setState({\n        rowsPerPage: event.target.value,\n        page: 0\n      }, function () {\n        this.updatePageData();\n      });\n    };\n\n    this.handleChangePage = (event, newPage) => {\n      this.setPage(newPage); //this.updatePageData();\n    };\n\n    this.updatePageData = () => {\n      var params = this.state.page + \"/\" + this.state.rowsPerPage;\n      getByPage(this.state.page, this.state.rowsPerPage).then(({\n        data\n      }) => this.setState({\n        administrativeList: [...data.content],\n        selectAllItem: false,\n        totalElements: data.totalElements\n      }));\n    };\n\n    this.handleDownload = () => {\n      var blob = new Blob([\"Hello, world!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, \"hello world.txt\");\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false,\n        shouldOpenConfirmationDeleteAllDialog: false\n      }); //this.updatePageData();\n    };\n\n    this.handleOKEditClose = () => {\n      this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n      this.updatePageData();\n    };\n\n    this.handleDeleteAdministrativeUnit = id => {\n      this.setState({\n        id,\n        shouldOpenConfirmationDialog: true\n      });\n    };\n\n    this.handleEditAdministrativeUnit = item => {\n      this.setState({\n        item: item,\n        shouldOpenEditorDialog: true\n      });\n    };\n\n    this.handleConfirmationResponse = () => {\n      deleteAdministrativeUnit(this.state.id).then(() => {\n        this.updatePageData();\n        this.handleDialogClose();\n      });\n    };\n\n    this.handleClick = (event, adminUnit) => {\n      let administrativeList = this.state.administrativeList;\n\n      if (adminUnit.checked == null) {\n        adminUnit.checked = true;\n      } else {\n        adminUnit.checked = !adminUnit.checked;\n      }\n\n      var selectAllItem = true;\n\n      for (var i = 0; i < administrativeList.length; i++) {\n        if (administrativeList[i].checked == null || administrativeList[i].checked == false) {\n          selectAllItem = false;\n        }\n\n        if (administrativeList[i].id == adminUnit.id) {\n          administrativeList[i] = adminUnit;\n        }\n      }\n\n      this.setState({\n        selectAllItem: selectAllItem,\n        administrativeList: administrativeList\n      });\n    };\n\n    this.handleSelectAllClick = event => {\n      let administrativeList = this.state.administrativeList;\n\n      for (var i = 0; i < administrativeList.length; i++) {\n        administrativeList[i].checked = !this.state.selectAllItem;\n      }\n\n      this.setState({\n        selectAllItem: !this.state.selectAllItem,\n        administrativeList: administrativeList\n      });\n    };\n\n    this.handleDeleteAll = event => {\n      let administrativeList = this.state.administrativeList;\n      this.handleDeleteList(administrativeList).then(() => {\n        this.updatePageData();\n        this.handleDialogClose();\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageData();\n  }\n\n  handleDeleteList(list) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            i = 0;\n\n          case 1:\n            if (!(i < list.length)) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!list[i].checked) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 5;\n            return deleteAdministrativeUnit(list[i].id);\n\n          case 5:\n            i++;\n            _context.next = 1;\n            break;\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  // handleDeleteAll = (event) => {\n  //   let {administrativeList} =  this.state;\n  //   for(var i=0;i<administrativeList.length;i++){\n  //     if(administrativeList[i].checked){\n  //       deleteAdministrativeUnit(administrativeList[i].id);\n  //     }\n  //   }    \n  //   this.updatePageData();\n  //   this.handleDialogClose();\n  // };\n  render() {\n    const _this$props = this.props,\n          t = _this$props.t,\n          i18n = _this$props.i18n;\n    let _this$state = this.state,\n        rowsPerPage = _this$state.rowsPerPage,\n        page = _this$state.page,\n        administrativeList = _this$state.administrativeList,\n        shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n        shouldOpenEditorDialog = _this$state.shouldOpenEditorDialog,\n        shouldOpenConfirmationDeleteAllDialog = _this$state.shouldOpenConfirmationDeleteAllDialog;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      routeSegments: [{\n        name: \"AdministrativeUnit Table\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-16\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.setState({\n        shouldOpenEditorDialog: true,\n        item: {}\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, t('AdministrativeUnitTable.AddNew')), /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-16\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.setState({\n        shouldOpenConfirmationDeleteAllDialog: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, t('Delete')), /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-16\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => this.handleDownload(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, t('Download')), /*#__PURE__*/React.createElement(TableContainer, {\n      style: {\n        maxHeight: 200\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      stickyHeader: true,\n      className: \"crud-table\",\n      style: {\n        whiteSpace: \"pre\",\n        minWidth: \"750px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox //indeterminate={this.numSelected > 0 && this.numSelected < this.rowCount}\n    , {\n      checked: this.state.selectAllItem,\n      onChange: this.handleSelectAllClick,\n      inputProps: {\n        'aria-label': 'select all desserts'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, t('Name')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, t('Code')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, t('Level')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, t('Status')), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, t('Action')))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, administrativeList.map((adminUnit, index) => {\n      return /*#__PURE__*/React.createElement(TableRow, {\n        key: shortid.generate(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        onClick: event => this.handleClick(event, adminUnit),\n        checked: adminUnit.checked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }, adminUnit.name), /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }\n      }, adminUnit.code), /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        align: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }\n      }, adminUnit.level), /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, adminUnit.checked ? /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-primary text-white px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }\n      }, \"active\") : /*#__PURE__*/React.createElement(\"small\", {\n        className: \"border-radius-4 bg-light-gray px-8 py-2 \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }\n      }, \"inactive\")), /*#__PURE__*/React.createElement(TableCell, {\n        className: \"px-0 border-none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => this.handleEditAdministrativeUnit(adminUnit),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }\n      }, \"edit\")), /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => this.handleDeleteAdministrativeUnit(adminUnit.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        color: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }\n      }, \"delete\"))));\n    })))), /*#__PURE__*/React.createElement(TablePagination, {\n      className: \"px-16\",\n      rowsPerPageOptions: [1, 2, 5, 10, 25],\n      component: \"div\",\n      count: this.state.totalElements,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      backIconButtonProps: {\n        \"aria-label\": \"Previous Page\"\n      },\n      nextIconButtonProps: {\n        \"aria-label\": \"Next Page\"\n      },\n      onChangePage: this.handleChangePage,\n      onChangeRowsPerPage: this.setRowsPerPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }\n    }), shouldOpenEditorDialog && /*#__PURE__*/React.createElement(AdministrativeUnitEditorDialog, {\n      handleClose: this.handleDialogClose,\n      handleOKEditClose: this.handleOKEditClose,\n      open: shouldOpenEditorDialog,\n      item: this.state.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    }), shouldOpenConfirmationDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n      open: shouldOpenConfirmationDialog,\n      onConfirmDialogClose: this.handleDialogClose,\n      onYesClick: this.handleConfirmationResponse,\n      text: \"Are you sure to delete?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }), shouldOpenConfirmationDeleteAllDialog && /*#__PURE__*/React.createElement(ConfirmationDialog, {\n      open: shouldOpenConfirmationDeleteAllDialog,\n      onConfirmDialogClose: this.handleDialogClose,\n      onYesClick: this.handleDeleteAll,\n      text: \"Are you sure to delete all?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default AdministrativeUnitTable;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/AdministrativeUnit/AdministrativeUnitTable.jsx"],"names":["React","Component","IconButton","Table","TableHead","TableBody","TableRow","TableCell","Icon","TablePagination","TableContainer","Button","Card","Checkbox","TableSortLabel","getAllAdministrativeUnits","deleteAdministrativeUnit","getByPage","AdministrativeUnitEditorDialog","Breadcrumb","ConfirmationDialog","useTranslation","withTranslation","Trans","shortid","saveAs","AdministrativeUnitTable","state","rowsPerPage","page","administrativeList","item","shouldOpenEditorDialog","shouldOpenConfirmationDialog","selectAllItem","selectedList","totalElements","shouldOpenConfirmationDeleteAllDialog","numSelected","rowCount","setPage","setState","updatePageData","setRowsPerPage","event","target","value","handleChangePage","newPage","params","then","data","content","handleDownload","blob","Blob","type","handleDialogClose","handleOKEditClose","handleDeleteAdministrativeUnit","id","handleEditAdministrativeUnit","handleConfirmationResponse","handleClick","adminUnit","checked","i","length","handleSelectAllClick","handleDeleteAll","handleDeleteList","componentDidMount","list","render","props","t","i18n","name","maxHeight","whiteSpace","minWidth","map","index","generate","code","level"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  IconButton,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Icon,\n  TablePagination,\n  TableContainer,\n  Button,\n  Card,\n  Checkbox,\n  TableSortLabel\n} from \"@material-ui/core\";\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit, getByPage } from \"./AdministrativeUnitService\";\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\nimport { Breadcrumb, ConfirmationDialog } from \"egret\";\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\nimport shortid from \"shortid\";\nimport { saveAs } from 'file-saver';\nclass AdministrativeUnitTable extends Component {\n  state = {\n    rowsPerPage: 10,\n    page: 0,\n    administrativeList: [],\n    item:{},\n    shouldOpenEditorDialog: false,\n    shouldOpenConfirmationDialog: false,\n    selectAllItem:false,\n    selectedList:[],\n    totalElements:0,\n    shouldOpenConfirmationDeleteAllDialog:false\n  };\n  numSelected =0;\n  rowCount=0;\n  \n  setPage = page => {\n    //this.setState({ page });\n    this.setState({ page },function(){\n      this.updatePageData();\n     })\n  };\n\n  setRowsPerPage = event => {\n   this.setState({ rowsPerPage: event.target.value, page:0},function(){\n    this.updatePageData();\n   })\n  };\n\n  handleChangePage = (event, newPage) => {\n    this.setPage(newPage);\n    //this.updatePageData();\n  };\n\n  updatePageData = () => {\n    var params = this.state.page+\"/\"+this.state.rowsPerPage;\n    getByPage(this.state.page,this.state.rowsPerPage).then(({ data }) => this.setState({\n       administrativeList: [...data.content],selectAllItem:false, totalElements:data.totalElements\n      }));\n  };\n\n  handleDownload = () => {\n    var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"hello world.txt\");    \n  }\n  handleDialogClose = () => {\n    this.setState({\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false,\n      shouldOpenConfirmationDeleteAllDialog:false\n    });\n    //this.updatePageData();\n  };\n\n  handleOKEditClose = () => {\n    this.setState({\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false\n    });\n    this.updatePageData();\n  };\n\n  handleDeleteAdministrativeUnit = id => {\n    this.setState({\n      id,\n      shouldOpenConfirmationDialog: true\n    });\n  };\n\n  handleEditAdministrativeUnit = item => {\n    this.setState({\n      item:item,\n      shouldOpenEditorDialog: true\n    });\n  };\n\n  handleConfirmationResponse = () => {\n    deleteAdministrativeUnit(this.state.id).then(() => {\n      this.updatePageData();\n      this.handleDialogClose();\n    });\n  };\n\n  componentDidMount() {\n    this.updatePageData();\n  }\n\n \n  handleClick = (event, adminUnit) => {\n    let {administrativeList} =  this.state;\n    if(adminUnit.checked==null){\n      adminUnit.checked=true;\n    }else {\n      adminUnit.checked=!adminUnit.checked;\n    }\n    var selectAllItem=true;\n    for(var i=0;i<administrativeList.length;i++){\n      if(administrativeList[i].checked==null || administrativeList[i].checked==false){\n        selectAllItem=false;\n      }\n      if(administrativeList[i].id==adminUnit.id){\n        administrativeList[i]=adminUnit;\n      }\n    }\n    this.setState({selectAllItem:selectAllItem, administrativeList:administrativeList});\n    \n  };\n   handleSelectAllClick = (event) => {\n    let {administrativeList} =  this.state;\n    for(var i=0;i<administrativeList.length;i++){\n      administrativeList[i].checked=!this.state.selectAllItem;\n    }\n     this.setState({selectAllItem:!this.state.selectAllItem, administrativeList:administrativeList});\n  };\n\n  async handleDeleteList(list){\n    for(var i=0;i<list.length;i++){\n      if(list[i].checked){\n        await deleteAdministrativeUnit(list[i].id);\n      }\n    }    \n  }\n  handleDeleteAll = (event) => {\n    let {administrativeList} =  this.state;\n    this.handleDeleteList(administrativeList).then(()=>{  \n      this.updatePageData();\n      this.handleDialogClose();\n    }\n    );\n  };\n\n  // handleDeleteAll = (event) => {\n  //   let {administrativeList} =  this.state;\n  //   for(var i=0;i<administrativeList.length;i++){\n  //     if(administrativeList[i].checked){\n  //       deleteAdministrativeUnit(administrativeList[i].id);\n  //     }\n  //   }    \n  //   this.updatePageData();\n  //   this.handleDialogClose();\n  // };\n\n  render() {\n    const { t, i18n } = this.props;\n    let {\n      rowsPerPage,\n      page,\n      administrativeList,\n      shouldOpenConfirmationDialog,\n      shouldOpenEditorDialog,\n      shouldOpenConfirmationDeleteAllDialog\n    } = this.state;\n\n    return (\n      <div className=\"m-sm-30\">\n        \n        <div  className=\"mb-sm-30\">\n          <Breadcrumb routeSegments={[{ name: \"AdministrativeUnit Table\" }]} />\n        </div>\n\n        <Button\n          className=\"mb-16\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => this.setState({ shouldOpenEditorDialog: true,item:{} })}\n        >\n          {t('AdministrativeUnitTable.AddNew')}\n        </Button>\n        <Button\n          className=\"mb-16\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => this.setState({ shouldOpenConfirmationDeleteAllDialog: true})}\n        >\n          {t('Delete')}\n        </Button>  \n        <Button\n          className=\"mb-16\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => this.handleDownload()}\n        >\n          {t('Download')}\n        </Button>        \n        <TableContainer style={{maxHeight: 200}}>\n          <Table stickyHeader className=\"crud-table\" style={{ whiteSpace: \"pre\", minWidth: \"750px\" }}>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    //indeterminate={this.numSelected > 0 && this.numSelected < this.rowCount}\n                    checked={this.state.selectAllItem}\n                    onChange={this.handleSelectAllClick}\n                    inputProps={{ 'aria-label': 'select all desserts' }}\n                  />\n                </TableCell>                \n                <TableCell>{t('Name')}</TableCell>\n                <TableCell>{t('Code')}</TableCell>\n                <TableCell>{t('Level')}</TableCell>\n                <TableCell>{t('Status')}</TableCell>\n                <TableCell>{t('Action')}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {administrativeList\n                .map((adminUnit, index) => {\n                  return(\n                  <TableRow key={shortid.generate()}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox onClick={(event) => this.handleClick(event, adminUnit)}\n                        checked={adminUnit.checked}\n                      />\n                    </TableCell>\n                    <TableCell className=\"px-0\">{adminUnit.name}</TableCell>\n                    <TableCell className=\"px-0\" align=\"left\">\n                      {adminUnit.code}\n                    </TableCell>\n                    \n                    <TableCell className=\"px-0\" align=\"left\">\n                      {adminUnit.level}\n                    </TableCell>\n                    <TableCell className=\"px-0\">\n                      {adminUnit.checked ? (\n                        <small className=\"border-radius-4 bg-primary text-white px-8 py-2 \">\n                          active\n                        </small>\n                      ) : (\n                        <small className=\"border-radius-4 bg-light-gray px-8 py-2 \">\n                          inactive\n                        </small>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"px-0 border-none\">\n                      <IconButton\n                        onClick={() =>\n                          this.handleEditAdministrativeUnit(adminUnit)\n                        }\n                      >\n                        <Icon color=\"primary\">edit</Icon>\n                      </IconButton>\n                      <IconButton onClick={() => this.handleDeleteAdministrativeUnit(adminUnit.id)}>\n                        <Icon color=\"error\">delete</Icon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                  )})}\n            </TableBody>\n          </Table>\n          </TableContainer>\n          <TablePagination\n            className=\"px-16\"\n            rowsPerPageOptions={[1,2,5, 10, 25]}\n            component=\"div\"\n            count={this.state.totalElements}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            backIconButtonProps={{\n              \"aria-label\": \"Previous Page\"\n            }}\n            nextIconButtonProps={{\n              \"aria-label\": \"Next Page\"\n            }}\n            onChangePage={this.handleChangePage}\n            onChangeRowsPerPage={this.setRowsPerPage}\n          />\n\n          {shouldOpenEditorDialog && (\n            <AdministrativeUnitEditorDialog\n              handleClose={this.handleDialogClose}\n              handleOKEditClose={this.handleOKEditClose}\n              open={shouldOpenEditorDialog}\n              item={this.state.item}\n            />\n          )}\n          {shouldOpenConfirmationDialog && (\n            <ConfirmationDialog\n              open={shouldOpenConfirmationDialog}\n              onConfirmDialogClose={this.handleDialogClose}\n              onYesClick={this.handleConfirmationResponse}\n              text=\"Are you sure to delete?\"\n            />\n          )}\n\n          {shouldOpenConfirmationDeleteAllDialog && (\n            <ConfirmationDialog\n              open={shouldOpenConfirmationDeleteAllDialog}\n              onConfirmDialogClose={this.handleDialogClose}\n              onYesClick={this.handleDeleteAll}\n              text=\"Are you sure to delete all?\"\n            />\n          )}          \n        \n      </div>\n    );\n  }\n}\n\nexport default AdministrativeUnitTable;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import jwtAuthService from \"../../services/jwtAuthService\";\nimport FirebaseAuthService from \"../../services/firebase/firebaseAuthService\";\nimport { setUserData } from \"./UserActions\";\nimport history from \"history.js\";\nimport ConstantList from \"../../appConfig\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const RESET_PASSWORD = \"RESET_PASSWORD\";\nexport function loginWithEmailAndPassword({\n  email,\n  password\n}) {\n  return dispatch => {\n    dispatch({\n      type: LOGIN_LOADING\n    });\n    jwtAuthService //.loginWithEmailAndPassword(email, password)\n    //.loginWithToken()\n    .loginWithUserNameAndPassword(email, password).then(user => {\n      dispatch(setUserData(user)); //Lưu lại thông tin liên quan đến token tại đây\n      //Nhảy đến trang HomePage dự kiến\n\n      history.push({\n        pathname: ConstantList.ROOT_PATH + \"dashboard/learning-management\"\n      });\n      return dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(error => {\n      alert('Mời bạn đăng nhập lại'); //Cần xem cách đưa ra thông báo thông qua đa ngôn ngữ\n\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function resetPassword({\n  email\n}) {\n  return dispatch => {\n    dispatch({\n      payload: email,\n      type: RESET_PASSWORD\n    });\n  };\n}\nexport function firebaseLoginEmailPassword({\n  email,\n  password\n}) {\n  return dispatch => {\n    /*FirebaseAuthService.signInWithEmailAndPassword(email, password)*/\n    jwtAuthService.loginWithToken().then(user => {\n      if (user) {\n        dispatch(setUserData(user));\n        history.push({\n          pathname: ConstantList.ROOT_PATH + \"dashboard/nhanvien\"\n        });\n        return dispatch({\n          type: LOGIN_SUCCESS\n        });\n      } else {\n        return dispatch({\n          type: LOGIN_ERROR,\n          payload: \"Login Failed\"\n        });\n      }\n    }).catch(error => {\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: error\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/redux/actions/LoginActions.js"],"names":["jwtAuthService","FirebaseAuthService","setUserData","history","ConstantList","LOGIN_ERROR","LOGIN_SUCCESS","LOGIN_LOADING","RESET_PASSWORD","loginWithEmailAndPassword","email","password","dispatch","type","loginWithUserNameAndPassword","then","user","push","pathname","ROOT_PATH","catch","error","alert","payload","resetPassword","firebaseLoginEmailPassword","loginWithToken"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,+BAA3B;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,SAASC,yBAAT,CAAmC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAnC,EAAwD;AAC7D,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAIAP,IAAAA,cAAc,CACZ;AACA;AAFY,KAGXc,4BAHH,CAGgCJ,KAHhC,EAGsCC,QAHtC,EAIGI,IAJH,CAIQC,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAACV,WAAW,CAACc,IAAD,CAAZ,CAAR,CADY,CAEZ;AAEA;;AACAb,MAAAA,OAAO,CAACc,IAAR,CAAa;AACXC,QAAAA,QAAQ,EAAEd,YAAY,CAACe,SAAb,GAAuB;AADtB,OAAb;AAGA,aAAOP,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAEP;AADQ,OAAD,CAAf;AAGD,KAfH,EAgBGc,KAhBH,CAgBSC,KAAK,IAAI;AACdC,MAAAA,KAAK,CAAC,uBAAD,CAAL,CADc,CACiB;;AAC/B,aAAOV,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAER,WADQ;AAEdkB,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KAtBH;AAuBD,GA5BD;AA6BD;AAED,OAAO,SAASG,aAAT,CAAuB;AAAEd,EAAAA;AAAF,CAAvB,EAAkC;AACvC,SAAOE,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AACPW,MAAAA,OAAO,EAAEb,KADF;AAEPG,MAAAA,IAAI,EAAEL;AAFC,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASiB,0BAAT,CAAoC;AAAEf,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAApC,EAAyD;AAC9D,SAAOC,QAAQ,IAAI;AACjB;AACEZ,IAAAA,cAAc,CAAC0B,cAAf,GACCX,IADD,CACMC,IAAI,IAAI;AACZ,UAAIA,IAAJ,EAAU;AACRJ,QAAAA,QAAQ,CACNV,WAAW,CAACc,IAAD,CADL,CAAR;AAIAb,QAAAA,OAAO,CAACc,IAAR,CAAa;AACXC,UAAAA,QAAQ,EAAEd,YAAY,CAACe,SAAb,GAAuB;AADtB,SAAb;AAIA,eAAOP,QAAQ,CAAC;AACdC,UAAAA,IAAI,EAAEP;AADQ,SAAD,CAAf;AAGD,OAZD,MAYO;AACL,eAAOM,QAAQ,CAAC;AACdC,UAAAA,IAAI,EAAER,WADQ;AAEdkB,UAAAA,OAAO,EAAE;AAFK,SAAD,CAAf;AAID;AACF,KApBD,EAqBCH,KArBD,CAqBOC,KAAK,IAAI;AACd,aAAOT,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAER,WADQ;AAEdkB,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KA1BD;AA2BH,GA7BD;AA8BD","sourcesContent":["import jwtAuthService from \"../../services/jwtAuthService\";\nimport FirebaseAuthService from \"../../services/firebase/firebaseAuthService\";\nimport { setUserData } from \"./UserActions\";\nimport history from \"history.js\";\nimport ConstantList from \"../../appConfig\";\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_LOADING = \"LOGIN_LOADING\";\nexport const RESET_PASSWORD = \"RESET_PASSWORD\";\n\nexport function loginWithEmailAndPassword({ email, password }) {\n  return dispatch => {\n    dispatch({\n      type: LOGIN_LOADING\n    });\n\n    jwtAuthService\n      //.loginWithEmailAndPassword(email, password)\n      //.loginWithToken()\n      .loginWithUserNameAndPassword(email,password)\n      .then(user => {\n        dispatch(setUserData(user));\n        //Lưu lại thông tin liên quan đến token tại đây\n\n        //Nhảy đến trang HomePage dự kiến\n        history.push({\n          pathname: ConstantList.ROOT_PATH+\"dashboard/learning-management\"\n        });\n        return dispatch({\n          type: LOGIN_SUCCESS\n        });\n      })\n      .catch(error => {\n        alert('Mời bạn đăng nhập lại');//Cần xem cách đưa ra thông báo thông qua đa ngôn ngữ\n        return dispatch({\n          type: LOGIN_ERROR,\n          payload: error\n        });\n      });\n  };\n}\n\nexport function resetPassword({ email }) {\n  return dispatch => {\n    dispatch({\n      payload: email,\n      type: RESET_PASSWORD\n    });\n  };\n}\n\nexport function firebaseLoginEmailPassword({ email, password }) {\n  return dispatch => {\n    /*FirebaseAuthService.signInWithEmailAndPassword(email, password)*/\n      jwtAuthService.loginWithToken()\n      .then(user => {\n        if (user) {\n          dispatch(\n            setUserData(user)\n          );\n\n          history.push({\n            pathname: ConstantList.ROOT_PATH+\"dashboard/nhanvien\"\n          });\n\n          return dispatch({\n            type: LOGIN_SUCCESS\n          });\n        } else {\n          return dispatch({\n            type: LOGIN_ERROR,\n            payload: \"Login Failed\"\n          });\n        }\n      })\n      .catch(error => {\n        return dispatch({\n          type: LOGIN_ERROR,\n          payload: error\n        });\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
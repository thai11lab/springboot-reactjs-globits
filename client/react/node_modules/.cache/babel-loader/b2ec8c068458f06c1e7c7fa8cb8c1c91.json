{"ast":null,"code":"import _objectSpread from \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\AdministrativeUnit\\\\AdazzleTable.js\";\nimport React, { useState, Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport createRowData from \"./createRowData\";\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit } from \"./AdministrativeUnitService\";\nimport \"./styles.css\";\nimport { IconButton, Table, TableHead, TableBody, TableRow, TableCell, Icon, TablePagination, TableContainer, Button, Card } from \"@material-ui/core\"; //import PageGuide from \"./PageGuide\";\n\nclass AdazzleTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rowsPerPage: 10,\n      page: 0,\n      administrativeList: [],\n      shouldOpenEditorDialog: false,\n      shouldOpenConfirmationDialog: false\n    };\n    this.defaultColumnProperties = {\n      width: 160\n    };\n    this.rows = createRowData(50);\n    this.columns = [{\n      key: \"id\",\n      name: \"ID\"\n    }, {\n      key: \"name\",\n      name: \"Name\"\n    }, {\n      key: \"code\",\n      name: \"Code\"\n    }].map(c => _objectSpread(_objectSpread({}, c), this.defaultColumnProperties));\n    this.firstNameActions = [{\n      icon: /*#__PURE__*/React.createElement(\"span\", {\n        className: \"glyphicon glyphicon-remove\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }),\n      callback: () => {\n        alert(\"Deleting\");\n      }\n    }, {\n      icon: \"glyphicon glyphicon-link\",\n      actions: [{\n        text: \"Option 1\",\n        callback: () => {\n          this.showModal();\n          alert(\"Option 1 clicked\");\n        }\n      }, {\n        text: \"Option 2\",\n        callback: () => {\n          alert(\"Option 2 clicked\"); //toggleModal();\n        }\n      }]\n    }];\n\n    this.getCellActions = (column, row) => {\n      this.setState({\n        item: row\n      });\n      const cellActions = {\n        firstName: this.firstNameActions\n      }; //return row.id % 2 === 0 ? cellActions[column.key] : null;\n\n      return cellActions[column.key];\n    };\n\n    this.state = {\n      show: false\n    };\n\n    this.showModal = () => {\n      alert('showModal');\n      this.shouldOpenEditorDialog = true;\n      this.setState({\n        show: true,\n        shouldOpenEditorDialog: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.handleDialogClose = () => {\n      this.setState({\n        shouldOpenEditorDialog: false,\n        shouldOpenConfirmationDialog: false\n      });\n      this.updatePageData();\n    };\n\n    this.updatePageData = () => {\n      getAllAdministrativeUnits().then(({\n        data\n      }) => this.setState({\n        administrativeList: [...data.content],\n        page: data.pageable.pageNumber + 1\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageData();\n    if (this.state.administrativeList != null) alert(this.state.administrativeList.length);\n  }\n\n  render() {\n    const ROW_COUNT = 50;\n    let _this$state = this.state,\n        rowsPerPage = _this$state.rowsPerPage,\n        page = _this$state.page,\n        administrativeList = _this$state.administrativeList,\n        shouldOpenConfirmationDialog = _this$state.shouldOpenConfirmationDialog,\n        shouldOpenEditorDialog = _this$state.shouldOpenEditorDialog;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }, shouldOpenEditorDialog && /*#__PURE__*/React.createElement(AdministrativeUnitEditorDialog, {\n      handleClose: this.handleDialogClose,\n      open: shouldOpenEditorDialog,\n      item: this.state.item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ReactDataGrid, {\n      columns: this.columns,\n      rowGetter: i => this.rows,\n      rowsCount: ROW_COUNT,\n      minHeight: 500,\n      getCellActions: this.getCellActions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AdazzleTable; //const container = document.createElement(\"div\");\n//document.body.appendChild(container);\n//ReactDOM.render(<Dashboard />, container);","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/AdministrativeUnit/AdazzleTable.js"],"names":["React","useState","Component","ReactDOM","ReactDataGrid","createRowData","AdministrativeUnitEditorDialog","getAllAdministrativeUnits","deleteAdministrativeUnit","IconButton","Table","TableHead","TableBody","TableRow","TableCell","Icon","TablePagination","TableContainer","Button","Card","AdazzleTable","state","rowsPerPage","page","administrativeList","shouldOpenEditorDialog","shouldOpenConfirmationDialog","defaultColumnProperties","width","rows","columns","key","name","map","c","firstNameActions","icon","callback","alert","actions","text","showModal","getCellActions","column","row","setState","item","cellActions","firstName","show","hideModal","handleDialogClose","updatePageData","then","data","content","pageable","pageNumber","componentDidMount","length","render","ROW_COUNT","i"],"mappings":"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","sourcesContent":["import React, { useState, Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport createRowData from \"./createRowData\";\r\nimport AdministrativeUnitEditorDialog from \"./AdministrativeUnitEditorDialog\";\r\nimport { getAllAdministrativeUnits, deleteAdministrativeUnit } from \"./AdministrativeUnitService\";\r\nimport \"./styles.css\";\r\nimport {\r\n  IconButton,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Icon,\r\n  TablePagination,\r\n  TableContainer,\r\n  Button,\r\n  Card\r\n} from \"@material-ui/core\";\r\n//import PageGuide from \"./PageGuide\";\r\nclass AdazzleTable extends Component {\r\n  state = {\r\n    rowsPerPage: 10,\r\n    page: 0,\r\n    administrativeList: [],\r\n    shouldOpenEditorDialog: false,\r\n    shouldOpenConfirmationDialog: false\r\n  };\r\n  defaultColumnProperties = {\r\n    width: 160\r\n  };\r\n  rows=createRowData(50);\r\n  // columns = [\r\n  //   {\r\n  //     key: \"id\",\r\n  //     name: \"ID\"\r\n  //   },\r\n  //   {\r\n  //     key: \"firstName\",\r\n  //     name: \"First Name\"\r\n  //   },\r\n  //   {\r\n  //     key: \"lastName\",\r\n  //     name: \"Last Name\"\r\n  //   },\r\n  //   {\r\n  //     key: \"jobTitle\",\r\n  //     name: \"Job Title\"\r\n  //   },\r\n  //   {\r\n  //     key: \"jobArea\",\r\n  //     name: \"Job Area\"\r\n  //   },\r\n  //   {\r\n  //     key: \"jobType\",\r\n  //     name: \"Job Type\"\r\n  //   },\r\n  //   {\r\n  //     key: \"email\",\r\n  //     name: \"Email\"\r\n  //   },\r\n  //   {\r\n  //     key: \"street\",\r\n  //     name: \"Street\"\r\n  //   },\r\n  //   {\r\n  //     key: \"zipCode\",\r\n  //     name: \"ZipCode\"\r\n  //   },\r\n  //   {\r\n  //     key: \"date\",\r\n  //     name: \"Date\"\r\n  //   },\r\n  //   {\r\n  //     key: \"catchPhrase\",\r\n  //     name: \"Catch Phrase\"\r\n  //   }\r\n  // ].map(c => ({ ...c, ...this.defaultColumnProperties }));\r\n\r\n  columns = [\r\n    {\r\n      key: \"id\",\r\n      name: \"ID\"\r\n    },\r\n    {\r\n      key: \"name\",\r\n      name: \"Name\"\r\n    },\r\n    {\r\n      key: \"code\",\r\n      name: \"Code\"\r\n    }\r\n  ].map(c => ({ ...c, ...this.defaultColumnProperties }));\r\n  \r\n firstNameActions = [\r\n    {\r\n      icon: <span className=\"glyphicon glyphicon-remove\" />,\r\n      callback: () => {\r\n        alert(\"Deleting\");\r\n      }\r\n    },\r\n    {\r\n      icon: \"glyphicon glyphicon-link\",\r\n      actions: [\r\n        {\r\n          text: \"Option 1\",\r\n          callback: () => {\r\n            this.showModal();\r\n            alert(\"Option 1 clicked\");\r\n          }\r\n        },\r\n        {\r\n          text: \"Option 2\",\r\n          callback: () => {\r\n            alert(\"Option 2 clicked\");\r\n            //toggleModal();\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n  \r\n getCellActions=(column, row)=> {\r\n    this.setState({item:row});\r\n    const cellActions = {\r\n      firstName: this.firstNameActions\r\n    };\r\n    //return row.id % 2 === 0 ? cellActions[column.key] : null;\r\n    return cellActions[column.key];\r\n  }\r\n\r\n  state = { show: false };\r\n\r\n  showModal = () => {\r\n    alert('showModal');\r\n    this.shouldOpenEditorDialog =true;\r\n    this.setState({ show: true,shouldOpenEditorDialog: true });\r\n  };\r\n\r\n  hideModal = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  handleDialogClose = () => {\r\n    this.setState({\r\n      shouldOpenEditorDialog: false,\r\n      shouldOpenConfirmationDialog: false\r\n    });\r\n    this.updatePageData();\r\n  };\r\n  \r\n  componentDidMount() {\r\n    this.updatePageData();\r\n    if(this.state.administrativeList!=null)\r\n      alert(this.state.administrativeList.length);\r\n  }  \r\n  updatePageData = () => {\r\n    getAllAdministrativeUnits().then(({ data }) => this.setState({\r\n       administrativeList: [...data.content], page:data.pageable.pageNumber+1\r\n      }));\r\n  };  \r\n  render() {\r\n    const ROW_COUNT = 50;\r\n    let {\r\n      rowsPerPage,\r\n      page,\r\n      administrativeList,\r\n      shouldOpenConfirmationDialog,\r\n      shouldOpenEditorDialog\r\n    } = this.state;   \r\n    return (\r\n      <div> \r\n          {shouldOpenEditorDialog && (\r\n            <AdministrativeUnitEditorDialog\r\n              handleClose={this.handleDialogClose}\r\n              open={shouldOpenEditorDialog}\r\n              item={this.state.item}\r\n            />\r\n          )}           \r\n        <ReactDataGrid\r\n          columns={this.columns}\r\n          rowGetter={i => this.rows}\r\n          rowsCount={ROW_COUNT}\r\n          minHeight={500}\r\n          getCellActions={this.getCellActions}\r\n        />\r\n          {/* <TablePagination\r\n            className=\"px-16\"\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={administrativeList.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            backIconButtonProps={{\r\n              \"aria-label\": \"Previous Page\"\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": \"Next Page\"\r\n            }}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.setRowsPerPage}\r\n          />         */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AdazzleTable;\r\n//const container = document.createElement(\"div\");\r\n//document.body.appendChild(container);\r\n//ReactDOM.render(<Dashboard />, container);"]},"metadata":{},"sourceType":"module"}
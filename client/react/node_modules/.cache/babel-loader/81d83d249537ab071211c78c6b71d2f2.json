{"ast":null,"code":"import _objectSpread from \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\TraniningGlobits\\\\baitap_level2\\\\client\\\\react\\\\src\\\\app\\\\views\\\\chat-box\\\\AppChat.jsx\";\nimport React, { Component } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport { Breadcrumb, EgretSidenavContainer, EgretSidenav, EgretSidenavContent } from \"egret\";\nimport { getAllContact, getRecentContact, sendNewMessage, getContactById, getChatRoomByContactId } from \"./ChatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { generateRandomId, isMobile } from \"utils\";\n\nclass AppChat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: {\n        id: \"7863a6802ez0e277a0f98534\"\n      },\n      contactList: [],\n      recentContactList: [],\n      messageList: [],\n      currentChatRoom: \"\",\n      opponentUser: null,\n      open: true\n    };\n    this.bottomRef = React.createRef();\n\n    this.updateRecentContactList = () => {\n      let id = this.state.currentUser.id;\n      getRecentContact(id).then(data => {\n        this.setState({\n          recentContactList: [...data.data]\n        });\n      });\n    };\n\n    this.scrollToBottom = () => {\n      this.bottomRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.handleContactClick = contactId => {\n      if (isMobile()) this.toggleSidenav();\n      getContactById(contactId).then(({\n        data\n      }) => {\n        this.setState({\n          opponentUser: _objectSpread({}, data)\n        });\n      });\n      getChatRoomByContactId(this.state.currentUser.id, contactId).then(({\n        data\n      }) => {\n        let chatId = data.chatId,\n            messageList = data.messageList,\n            recentListUpdated = data.recentListUpdated;\n        console.log(chatId);\n        this.setState({\n          currentChatRoom: chatId,\n          messageList\n        }, () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        });\n\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      });\n    };\n\n    this.handleMessageSend = message => {\n      let id = this.state.currentUser.id;\n      let _this$state = this.state,\n          currentChatRoom = _this$state.currentChatRoom,\n          opponentUser = _this$state.opponentUser;\n      if (currentChatRoom === \"\") return;\n      sendNewMessage({\n        chatId: currentChatRoom,\n        text: message,\n        contactId: id,\n        time: new Date()\n      }).then(data => {\n        this.setState({\n          messageList: [...data.data]\n        }, () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }); // bot message\n\n        setTimeout(() => {\n          sendNewMessage({\n            chatId: currentChatRoom,\n            text: \"Hi, I'm \".concat(opponentUser.name, \". Your imaginary friend.\"),\n            contactId: opponentUser.id,\n            time: new Date()\n          }).then(data => {\n            this.setState({\n              messageList: [...data.data]\n            }, () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            });\n          });\n        }, 750); // bot message ends here\n      });\n    };\n\n    this.setBottomRef = ref => {\n      this.bottomRef = ref;\n    };\n\n    this.toggleSidenav = () => this.setState({\n      open: !this.state.open\n    });\n  }\n\n  componentDidMount() {\n    let id = this.state.currentUser.id;\n    getContactById(id).then(data => {\n      this.setState({\n        open: !isMobile(),\n        currentUser: _objectSpread({}, data.data)\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data => this.setState({\n      contactList: [...data.data]\n    }));\n    this.updateRecentContactList();\n  }\n\n  render() {\n    let _this$state2 = this.state,\n        currentUser = _this$state2.currentUser,\n        contactList = _this$state2.contactList,\n        recentContactList = _this$state2.recentContactList,\n        messageList = _this$state2.messageList,\n        opponentUser = _this$state2.opponentUser,\n        currentChatRoom = _this$state2.currentChatRoom;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"m-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mb-sm-30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      routeSegments: [{\n        name: \"Chat\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Card, {\n      elevation: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EgretSidenavContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(EgretSidenav, {\n      width: \"230px\",\n      open: this.state.open,\n      toggleSidenav: this.toggleSidenav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChatSidenav, {\n      currentUser: currentUser,\n      contactList: contactList,\n      recentContactList: recentContactList,\n      handleContactClick: this.handleContactClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(EgretSidenavContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChatContainer, {\n      id: currentUser.id,\n      opponentUser: opponentUser,\n      messageList: messageList,\n      currentChatRoom: currentChatRoom,\n      setBottomRef: this.setBottomRef,\n      handleMessageSend: this.handleMessageSend,\n      toggleSidenav: this.toggleSidenav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default AppChat;","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/views/chat-box/AppChat.jsx"],"names":["React","Component","Card","Breadcrumb","EgretSidenavContainer","EgretSidenav","EgretSidenavContent","getAllContact","getRecentContact","sendNewMessage","getContactById","getChatRoomByContactId","ChatSidenav","ChatContainer","generateRandomId","isMobile","AppChat","state","currentUser","id","contactList","recentContactList","messageList","currentChatRoom","opponentUser","open","bottomRef","createRef","updateRecentContactList","then","data","setState","scrollToBottom","current","scrollIntoView","behavior","handleContactClick","contactId","toggleSidenav","chatId","recentListUpdated","console","log","scrollTop","handleMessageSend","message","text","time","Date","setTimeout","name","setBottomRef","ref","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"@material-ui/core\";\nimport {\n  Breadcrumb,\n  EgretSidenavContainer,\n  EgretSidenav,\n  EgretSidenavContent\n} from \"egret\";\nimport {\n  getAllContact,\n  getRecentContact,\n  sendNewMessage,\n  getContactById,\n  getChatRoomByContactId\n} from \"./ChatService\";\nimport ChatSidenav from \"./ChatSidenav\";\nimport ChatContainer from \"./ChatContainer\";\nimport { generateRandomId, isMobile } from \"utils\";\n\nclass AppChat extends Component {\n  state = {\n    currentUser: {\n      id: \"7863a6802ez0e277a0f98534\"\n    },\n    contactList: [],\n    recentContactList: [],\n    messageList: [],\n    currentChatRoom: \"\",\n    opponentUser: null,\n    open: true\n  };\n\n  bottomRef = React.createRef();\n\n  componentDidMount() {\n    let { id } = this.state.currentUser;\n    getContactById(id).then(data => {\n      this.setState({\n        open: !isMobile(),\n        currentUser: {\n          ...data.data\n        }\n      });\n    });\n    getAllContact(this.state.currentUser.id).then(data =>\n      this.setState({ contactList: [...data.data] })\n    );\n    this.updateRecentContactList();\n  }\n\n  updateRecentContactList = () => {\n    let { id } = this.state.currentUser;\n    getRecentContact(id).then(data => {\n      this.setState({\n        recentContactList: [...data.data]\n      });\n    });\n  };\n\n  scrollToBottom = () => {\n    this.bottomRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  handleContactClick = contactId => {\n    if (isMobile()) this.toggleSidenav();\n\n    getContactById(contactId).then(({ data }) => {\n      this.setState({\n        opponentUser: { ...data }\n      });\n    });\n    getChatRoomByContactId(this.state.currentUser.id, contactId).then(\n      ({ data }) => {\n        let { chatId, messageList, recentListUpdated } = data;\n        console.log(chatId);\n\n        this.setState(\n          {\n            currentChatRoom: chatId,\n            messageList\n          },\n          () => {\n            this.bottomRef.scrollTop = 9999999999999;\n          }\n        );\n        if (recentListUpdated) {\n          this.updateRecentContactList();\n        }\n      }\n    );\n  };\n\n  handleMessageSend = message => {\n    let { id } = this.state.currentUser;\n    let { currentChatRoom, opponentUser } = this.state;\n    if (currentChatRoom === \"\") return;\n    sendNewMessage({\n      chatId: currentChatRoom,\n      text: message,\n      contactId: id,\n      time: new Date()\n    }).then(data => {\n      this.setState(\n        {\n          messageList: [...data.data]\n        },\n        () => {\n          this.bottomRef.scrollTop = 9999999999999;\n        }\n      );\n\n      // bot message\n      setTimeout(() => {\n        sendNewMessage({\n          chatId: currentChatRoom,\n          text: `Hi, I'm ${opponentUser.name}. Your imaginary friend.`,\n          contactId: opponentUser.id,\n          time: new Date()\n        }).then(data => {\n          this.setState(\n            {\n              messageList: [...data.data]\n            },\n            () => {\n              this.bottomRef.scrollTop = 9999999999999;\n            }\n          );\n        });\n      }, 750);\n      // bot message ends here\n    });\n  };\n\n  setBottomRef = ref => {\n    this.bottomRef = ref;\n  };\n\n  toggleSidenav = () => this.setState({ open: !this.state.open });\n\n  render() {\n    let {\n      currentUser,\n      contactList,\n      recentContactList,\n      messageList,\n      opponentUser,\n      currentChatRoom\n    } = this.state;\n    return (\n      <div className=\"m-sm-30\">\n        <div className=\"mb-sm-30\">\n          <Breadcrumb routeSegments={[{ name: \"Chat\" }]} />\n        </div>\n        <Card elevation={6}>\n          <EgretSidenavContainer>\n            <EgretSidenav\n              width=\"230px\"\n              open={this.state.open}\n              toggleSidenav={this.toggleSidenav}\n            >\n              <ChatSidenav\n                currentUser={currentUser}\n                contactList={contactList}\n                recentContactList={recentContactList}\n                handleContactClick={this.handleContactClick}\n              />\n            </EgretSidenav>\n            <EgretSidenavContent>\n              <ChatContainer\n                id={currentUser.id}\n                opponentUser={opponentUser}\n                messageList={messageList}\n                currentChatRoom={currentChatRoom}\n                setBottomRef={this.setBottomRef}\n                handleMessageSend={this.handleMessageSend}\n                toggleSidenav={this.toggleSidenav}\n              />\n            </EgretSidenavContent>\n          </EgretSidenavContainer>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default AppChat;\n"]},"metadata":{},"sourceType":"module"}
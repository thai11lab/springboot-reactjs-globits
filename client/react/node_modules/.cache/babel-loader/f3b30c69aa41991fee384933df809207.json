{"ast":null,"code":"import Keycloak from \"keycloak-js\";\nimport ConstantsList from '../appConfig';\nimport JwtAuthService from './jwtAuthService';\n\nconst _kc = new Keycloak(ConstantsList.ROOT_PATH + 'keycloak.json');\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\n\n\nconst initKeycloak = onAuthenticatedCallback => {\n  _kc.init({\n    onLoad: 'check-sso',\n    promiseType: 'native',\n    silentCheckSsoRedirectUri: window.location.origin + '/' + ConstantsList.ROOT_PATH + '/silent-check-sso.html',\n    pkceMethod: 'S256'\n  }).then(authenticated => {\n    if (authenticated) {\n      JwtAuthService.setLoginToken(_kc.token); //Xem lại hàm này để làm chuẩn xác hơn\n\n      onAuthenticatedCallback();\n    } else {\n      console.warn(\"not authenticated!\");\n      doLogin();\n    }\n  });\n};\n\nconst doLogin = _kc.login;\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst updateToken = successCallback => {\n  return _kc.updateToken(5).then(successCallback).catch(doLogin);\n};\n\nconst getUsername = () => _kc.tokenParsed.preferred_username;\n\nexport default {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  getToken,\n  updateToken,\n  getUsername\n};","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/services/UserService.js"],"names":["Keycloak","ConstantsList","JwtAuthService","_kc","ROOT_PATH","initKeycloak","onAuthenticatedCallback","init","onLoad","promiseType","silentCheckSsoRedirectUri","window","location","origin","pkceMethod","then","authenticated","setLoginToken","token","console","warn","doLogin","login","doLogout","logout","getToken","updateToken","successCallback","catch","getUsername","tokenParsed","preferred_username"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,cAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,MAAMC,GAAG,GAAG,IAAIH,QAAJ,CAAaC,aAAa,CAACG,SAAd,GAAwB,eAArC,CAAZ;AAEA;;;;;;;AAKA,MAAMC,YAAY,GAAIC,uBAAD,IAA6B;AAChDH,EAAAA,GAAG,CAACI,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE,WADD;AAEPC,IAAAA,WAAW,EAAE,QAFN;AAGPC,IAAAA,yBAAyB,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAwB,GAAxB,GAA4BZ,aAAa,CAACG,SAA1C,GAAqD,wBAHzE;AAIPU,IAAAA,UAAU,EAAE;AAJL,GAAT,EAMGC,IANH,CAMSC,aAAD,IAAmB;AACvB,QAAIA,aAAJ,EAAmB;AACjBd,MAAAA,cAAc,CAACe,aAAf,CAA6Bd,GAAG,CAACe,KAAjC,EADiB,CACuB;;AACxCZ,MAAAA,uBAAuB;AACxB,KAHD,MAGO;AACLa,MAAAA,OAAO,CAACC,IAAR,CAAa,oBAAb;AACAC,MAAAA,OAAO;AACR;AACF,GAdH;AAeD,CAhBD;;AAkBA,MAAMA,OAAO,GAAGlB,GAAG,CAACmB,KAApB;AAEA,MAAMC,QAAQ,GAAGpB,GAAG,CAACqB,MAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAMtB,GAAG,CAACe,KAA3B;;AAEA,MAAMQ,WAAW,GAAIC,eAAD,IAAqB;AACvC,SAAOxB,GAAG,CAACuB,WAAJ,CAAgB,CAAhB,EACJX,IADI,CACCY,eADD,EAEJC,KAFI,CAEEP,OAFF,CAAP;AAGD,CAJD;;AAMA,MAAMQ,WAAW,GAAG,MAAM1B,GAAG,CAAC2B,WAAJ,CAAgBC,kBAA1C;;AAEA,eAAe;AACb1B,EAAAA,YADa;AAEbgB,EAAAA,OAFa;AAGbE,EAAAA,QAHa;AAIbE,EAAAA,QAJa;AAKbC,EAAAA,WALa;AAMbG,EAAAA;AANa,CAAf","sourcesContent":["import Keycloak from \"keycloak-js\";\nimport ConstantsList from '../appConfig';\nimport JwtAuthService from './jwtAuthService';\nconst _kc = new Keycloak(ConstantsList.ROOT_PATH+'keycloak.json');\n\n/**\n * Initializes Keycloak instance and calls the provided callback function if successfully authenticated.\n *\n * @param onAuthenticatedCallback\n */\nconst initKeycloak = (onAuthenticatedCallback) => {\n  _kc.init({\n    onLoad: 'check-sso',\n    promiseType: 'native',\n    silentCheckSsoRedirectUri: window.location.origin +'/'+ConstantsList.ROOT_PATH+ '/silent-check-sso.html',\n    pkceMethod: 'S256',\n  })\n    .then((authenticated) => {\n      if (authenticated) {\n        JwtAuthService.setLoginToken(_kc.token);//Xem lại hàm này để làm chuẩn xác hơn\n        onAuthenticatedCallback();\n      } else {\n        console.warn(\"not authenticated!\");\n        doLogin();\n      }\n    })\n};\n\nconst doLogin = _kc.login;\n\nconst doLogout = _kc.logout;\n\nconst getToken = () => _kc.token;\n\nconst updateToken = (successCallback) => {\n  return _kc.updateToken(5)\n    .then(successCallback)\n    .catch(doLogin)\n};\n\nconst getUsername = () => _kc.tokenParsed.preferred_username;\n\nexport default {\n  initKeycloak,\n  doLogin,\n  doLogout,\n  getToken,\n  updateToken,\n  getUsername,\n}\n"]},"metadata":{},"sourceType":"module"}
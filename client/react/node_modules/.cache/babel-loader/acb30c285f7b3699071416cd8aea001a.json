{"ast":null,"code":"import axios from \"axios\";\nimport localStorageService from \"./localStorageService\";\nimport ConstantList from \"../appConfig\";\nimport UserService from \"../services/UserService\";\nconst config = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization': 'Basic Y29yZV9jbGllbnQ6c2VjcmV0'\n  }\n};\n\nclass JwtAuthService {\n  constructor() {\n    this.user = {\n      userId: \"1\",\n      role: 'ADMIN',\n      displayName: \"Watson Joyce\",\n      email: \"watsonjoyce@gmail.com\",\n      photoURL: ConstantList.ROOT_PATH + \"assets/images/face-7.jpg\",\n      age: 25,\n      token: \"faslkhfh423oiu4h4kj432rkj23h432u49ufjaklj423h4jkhkjh\"\n    };\n\n    this.loginWithUserNameAndPassword = (username, password) => {\n      let requestBody = 'client_id=core_client&grant_type=password&client_secret=secret';\n      requestBody = requestBody + '&username=' + username + '&password=' + password;\n      return axios.post(ConstantList.API_ENPOINT + '/oauth/token', requestBody, config).then(response => {\n        //this.setUser(data);\n        console.log(response); //alert(response.data.access_token);\n\n        this.setSession(response.data.access_token);\n        this.setLoginUser(response.data);\n      });\n    };\n\n    this.loginWithEmailAndPassword = (email, password) => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(this.user);\n        }, 1000);\n      }).then(data => {\n        //console.log(data);\n        this.setUser(data);\n        this.setSession(data.token);\n        return data;\n      });\n    };\n\n    this.loginWithToken = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(this.user);\n        }, 100);\n      }).then(data => {\n        this.setSession(data.token);\n        this.setUser(data);\n        return data;\n      });\n    };\n\n    this.logout = () => {\n      if (ConstantList.AUTH_MODE == \"Keycloak\") {\n        UserService.doLogout();\n      }\n\n      this.setSession(null);\n      this.removeUser();\n    };\n\n    this.setSession = token => {\n      //alert('setSession');\n      if (token) {\n        localStorage.setItem(\"jwt_token\", token);\n        axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n      } else {\n        localStorage.removeItem(\"jwt_token\");\n        delete axios.defaults.headers.common[\"Authorization\"];\n      }\n    };\n\n    this.setLoginUser = data => {\n      let user = {};\n      user.token = data.access_token;\n      user.role = \"ADMIN\";\n      user.age = 25;\n      user.displayName = \"Watson Joyce\";\n      user.photoURL = ConstantList.ROOT_PATH + \"assets/images/face-7.jpg\";\n      this.user = user;\n      localStorageService.setItem(\"auth_user\", user);\n      return user;\n    };\n\n    this.setLoginToken = data => {\n      let user = {};\n      user.token = data;\n      user.role = \"ADMIN\";\n      user.age = 25;\n      user.displayName = \"Watson Joyce\";\n      user.photoURL = ConstantList.ROOT_PATH + \"assets/images/face-7.jpg\";\n      this.user = user;\n      localStorageService.setItem(\"auth_user\", user);\n      return user;\n    };\n\n    this.setUser = user => {\n      localStorageService.setItem(\"auth_user\", user);\n    };\n\n    this.removeUser = () => {\n      localStorage.removeItem(\"auth_user\");\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"Thsdhaisdias\");\n  }\n\n}\n\nexport default new JwtAuthService();","map":{"version":3,"sources":["D:/TraniningGlobits/baitap_level2/client/react/src/app/services/jwtAuthService.js"],"names":["axios","localStorageService","ConstantList","UserService","config","headers","JwtAuthService","user","userId","role","displayName","email","photoURL","ROOT_PATH","age","token","loginWithUserNameAndPassword","username","password","requestBody","post","API_ENPOINT","then","response","console","log","setSession","data","access_token","setLoginUser","loginWithEmailAndPassword","Promise","resolve","reject","setTimeout","setUser","loginWithToken","logout","AUTH_MODE","doLogout","removeUser","localStorage","setItem","defaults","common","removeItem","setLoginToken","componentDidMount"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport localStorageService from \"./localStorageService\";\nimport ConstantList from \"../appConfig\";\nimport UserService from \"../services/UserService\";\nconst config = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Authorization':'Basic Y29yZV9jbGllbnQ6c2VjcmV0'\n  }\n}\nclass JwtAuthService {\n\n\n  user = {\n    userId: \"1\",\n    role: 'ADMIN',\n    displayName: \"Watson Joyce\",\n    email: \"watsonjoyce@gmail.com\",\n    photoURL:  ConstantList.ROOT_PATH+\"assets/images/face-7.jpg\",\n    age: 25,\n    token: \"faslkhfh423oiu4h4kj432rkj23h432u49ufjaklj423h4jkhkjh\"\n  }\n  loginWithUserNameAndPassword = (username, password) => {\n    let requestBody ='client_id=core_client&grant_type=password&client_secret=secret';\n    requestBody =requestBody+'&username='+username +'&password='+password;\n    return axios.post(ConstantList.API_ENPOINT+'/oauth/token',requestBody,config).then(response=>{\n      //this.setUser(data);\n      console.log(response);\n      //alert(response.data.access_token);\n      this.setSession(response.data.access_token);\n      this.setLoginUser(response.data);\n    });\n  };\n\n  loginWithEmailAndPassword = (email, password) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(this.user);\n      }, 1000);\n    }).then(data => {\n      //console.log(data);\n      this.setUser(data);\n      this.setSession(data.token);      \n      return data;\n    });\n  };\n\n  loginWithToken = () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(this.user);\n      }, 100);\n    }).then(data => {\n      this.setSession(data.token);\n      this.setUser(data);\n      return data;\n    });\n  };\n\n  \n\n  logout = () => {\n    if(ConstantList.AUTH_MODE==\"Keycloak\"){\n      UserService.doLogout();\n    }    \n    this.setSession(null);\n    this.removeUser();\n  }\n  \n  componentDidMount(){\n    console.log(\"Thsdhaisdias\");\n  }\n  setSession = token => {\n    //alert('setSession');\n    if (token) {\n      localStorage.setItem(\"jwt_token\", token);\n      axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    } else {\n      localStorage.removeItem(\"jwt_token\");\n      delete axios.defaults.headers.common[\"Authorization\"];\n    }\n  };\n  setLoginUser = (data) => {   \n    let user ={};\n    user.token = data.access_token; \n    user.role=\"ADMIN\";\n    user.age=25;\n    user.displayName =\"Watson Joyce\";\n    user.photoURL =ConstantList.ROOT_PATH+\"assets/images/face-7.jpg\";\n    this.user = user;\n    localStorageService.setItem(\"auth_user\", user);\n    return user;\n  }\n\n  setLoginToken = (data) => {   \n    let user ={};\n    user.token = data; \n    user.role=\"ADMIN\";\n    user.age=25;\n    user.displayName =\"Watson Joyce\";\n    user.photoURL =ConstantList.ROOT_PATH+\"assets/images/face-7.jpg\";\n    this.user = user;\n    localStorageService.setItem(\"auth_user\", user);\n    return user;\n  }\n\n  setUser = (user) => {    \n    localStorageService.setItem(\"auth_user\", user);\n  }\n  removeUser = () => {\n    localStorage.removeItem(\"auth_user\");\n  }\n}\n\nexport default new JwtAuthService();\n"]},"metadata":{},"sourceType":"module"}